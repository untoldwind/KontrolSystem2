{
  "core::background": {
    "name": "core::background",
    "description": "Provides means to run functions as asynchronous background task.\n",
    "types": {
      "Task": {
        "name": "Task",
        "description": "Represents a background task\n",
        "genericParameters": [
          "T"
        ],
        "fields": {
          "is_completed": {
            "name": "is_completed",
            "description": "Check if the task is completed\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "is_success": {
            "name": "is_success",
            "description": "Check if the task is completed and has a value\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "is_canceled": {
            "name": "is_canceled",
            "description": "Check if the task has been canceled\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "result": {
            "name": "result",
            "description": "Get the result of the task once completed\n",
            "readOnly": true,
            "type": {
              "kind": "Generic",
              "name": "T"
            }
          }
        },
        "methods": {
          "cancel": {
            "name": "cancel",
            "description": "Cancel/abort the task\n",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          }
        }
      }
    },
    "constants": {},
    "functions": {
      "is_background": {
        "name": "is_background",
        "description": "Check if current thread is a background thread\n",
        "parameters": [],
        "returnType": {
          "kind": "Builtin",
          "name": "bool"
        }
      },
      "run": {
        "name": "run",
        "description": "Run a function as background task.\n",
        "parameters": [
          {
            "name": "function",
            "type": {
              "kind": "Standard",
              "module": "",
              "name": "sync fn() -> T"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "core::background",
          "name": "Task<T>"
        }
      }
    }
  },
  "core::logging": {
    "name": "core::logging",
    "description": "Provides basic logging. In KSP all log messages will appear in the debug console as well as the `KSP.log` file.\n",
    "types": {},
    "constants": {},
    "functions": {
      "debug": {
        "name": "debug",
        "description": "Write a debug-level `message`.\n",
        "parameters": [
          {
            "name": "message",
            "type": {
              "kind": "Builtin",
              "name": "string"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "info": {
        "name": "info",
        "description": "Write an info-level `message`.\n",
        "parameters": [
          {
            "name": "message",
            "type": {
              "kind": "Builtin",
              "name": "string"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "warning": {
        "name": "warning",
        "description": "Write a warning-level `message`.\n",
        "parameters": [
          {
            "name": "message",
            "type": {
              "kind": "Builtin",
              "name": "string"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "error": {
        "name": "error",
        "description": "Write an error-level `message`.\n",
        "parameters": [
          {
            "name": "message",
            "type": {
              "kind": "Builtin",
              "name": "string"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      }
    }
  },
  "core::math": {
    "name": "core::math",
    "description": "Collection of basic mathematical functions.",
    "types": {
      "Random": {
        "name": "Random",
        "description": "Random number generator",
        "fields": {},
        "methods": {
          "next_int": {
            "name": "next_int",
            "description": "Get next random number between `min` and `max`",
            "parameters": [
              {
                "name": "min",
                "type": {
                  "kind": "Builtin",
                  "name": "int"
                },
                "hasDefault": false
              },
              {
                "name": "max",
                "type": {
                  "kind": "Builtin",
                  "name": "int"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "int"
            }
          },
          "next_float": {
            "name": "next_float",
            "description": "Get next random number between 0.0 and 1.0",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "next_gaussian": {
            "name": "next_gaussian",
            "description": "Get next gaussian distributed random number",
            "parameters": [
              {
                "name": "mu",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "sigma",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          }
        }
      }
    },
    "constants": {
      "PI": {
        "name": "PI",
        "description": "Represents the ratio of the circumference of a circle to its diameter, specified by the constant, Ï€.",
        "type": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "E": {
        "name": "E",
        "description": "Represents the natural logarithmic base, specified by the e constant,",
        "type": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "DEG_TO_RAD": {
        "name": "DEG_TO_RAD",
        "description": "Multiplicator to convert an angle of degree to radian.",
        "type": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "RAD_TO_DEG": {
        "name": "RAD_TO_DEG",
        "description": "Multiplicator to convert an angle of radian to degree.",
        "type": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "MIN_INT": {
        "name": "MIN_INT",
        "description": "Minimum possible integer number.",
        "type": {
          "kind": "Builtin",
          "name": "int"
        }
      },
      "MAX_INT": {
        "name": "MAX_INT",
        "description": "Maximum possible integer number.",
        "type": {
          "kind": "Builtin",
          "name": "int"
        }
      },
      "MIN_FLOAT": {
        "name": "MIN_FLOAT",
        "description": "Minimum possible floating point number.",
        "type": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "MAX_FLOAT": {
        "name": "MAX_FLOAT",
        "description": "Maximum possible floating point number.",
        "type": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "EPSILON": {
        "name": "EPSILON",
        "description": "Machine epsilon, i.e lowest possible resolution of a floating point number.",
        "type": {
          "kind": "Builtin",
          "name": "float"
        }
      }
    },
    "functions": {
      "abs": {
        "name": "abs",
        "description": "Returns the absolute value of a number.",
        "parameters": [
          {
            "name": "value",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "acos": {
        "name": "acos",
        "description": "Returns the angle in radian whose cosine is the specified number.",
        "parameters": [
          {
            "name": "d",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "acos_deg": {
        "name": "acos_deg",
        "description": "Returns the angle in degree whose cosine is the specified number.",
        "parameters": [
          {
            "name": "x",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "asin": {
        "name": "asin",
        "description": "Returns the angle in radian whose sine is the specified number.",
        "parameters": [
          {
            "name": "d",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "asin_deg": {
        "name": "asin_deg",
        "description": "Returns the angle in degree whose sine is the specified number.",
        "parameters": [
          {
            "name": "x",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "atan": {
        "name": "atan",
        "description": "Returns the angle in radian whose tanget is the specified number.",
        "parameters": [
          {
            "name": "d",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "atan_deg": {
        "name": "atan_deg",
        "description": "Returns the angle in degree whose tangent is the specified number.",
        "parameters": [
          {
            "name": "x",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "atan2": {
        "name": "atan2",
        "description": "Returns the angle in redian whose tangent is the quotient of two specified numbers.",
        "parameters": [
          {
            "name": "y",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "x",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "atan2_deg": {
        "name": "atan2_deg",
        "description": "Returns the angle in degree whose tangent is the quotient of two specified numbers.",
        "parameters": [
          {
            "name": "y",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "x",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "ceiling": {
        "name": "ceiling",
        "description": "Returns the smallest integral value that is greater than or equal to the specified number.",
        "parameters": [
          {
            "name": "a",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "cos": {
        "name": "cos",
        "description": "Returns the cosine of the specified angle in redian.",
        "parameters": [
          {
            "name": "d",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "cos_deg": {
        "name": "cos_deg",
        "description": "Returns the cosine of the specified angle in degree.",
        "parameters": [
          {
            "name": "x",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "cosh": {
        "name": "cosh",
        "description": "Returns the hyperbolic cosine of the specified angle.",
        "parameters": [
          {
            "name": "value",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "exp": {
        "name": "exp",
        "description": "Returns e raised to the specified power.",
        "parameters": [
          {
            "name": "d",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "floor": {
        "name": "floor",
        "description": "Returns the largest integral value less than or equal to the specified number.",
        "parameters": [
          {
            "name": "d",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "log": {
        "name": "log",
        "description": "Returns the natural (base e) logarithm of a specified number.",
        "parameters": [
          {
            "name": "d",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "log10": {
        "name": "log10",
        "description": "Returns the base 10 logarithm of a specified number.",
        "parameters": [
          {
            "name": "d",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "max": {
        "name": "max",
        "description": "Returns the larger of two decimal numbers.",
        "parameters": [
          {
            "name": "val1",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "val2",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "min": {
        "name": "min",
        "description": "Returns the smaller of two decimal numbers.",
        "parameters": [
          {
            "name": "val1",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "val2",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "pow": {
        "name": "pow",
        "description": "Returns a specified number raised to the specified power.",
        "parameters": [
          {
            "name": "x",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "y",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "round": {
        "name": "round",
        "description": "Rounds a decimal value to the nearest integral value, and rounds midpoint values to the nearest even number.",
        "parameters": [
          {
            "name": "a",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "sin": {
        "name": "sin",
        "description": "Returns the sine of the specified angle in redian.",
        "parameters": [
          {
            "name": "a",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "sin_deg": {
        "name": "sin_deg",
        "description": "Returns the sine of the specified angle in degree.",
        "parameters": [
          {
            "name": "x",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "sinh": {
        "name": "sinh",
        "description": "Returns the hyperbolic sine of the specified angle.",
        "parameters": [
          {
            "name": "value",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "sqrt": {
        "name": "sqrt",
        "description": "Returns the square root of a specified number.",
        "parameters": [
          {
            "name": "d",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "tan": {
        "name": "tan",
        "description": "Returns the sine of the specified angle in redian.",
        "parameters": [
          {
            "name": "a",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "tan_deg": {
        "name": "tan_deg",
        "description": "Returns the sine of the specified angle in degree.",
        "parameters": [
          {
            "name": "x",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "tanh": {
        "name": "tanh",
        "description": "Returns the hyperbolic tangent of the specified angle.",
        "parameters": [
          {
            "name": "value",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "truncate": {
        "name": "truncate",
        "description": "Calculates the integral part of a specified number.",
        "parameters": [
          {
            "name": "d",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "acosh": {
        "name": "acosh",
        "description": "Returns the angle whose hyperbolic cosine is the specified number.",
        "parameters": [
          {
            "name": "x",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "asinh": {
        "name": "asinh",
        "description": "Returns the angle whose hyperbolic sine is the specified number.",
        "parameters": [
          {
            "name": "x",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "atanh": {
        "name": "atanh",
        "description": "Returns the angle whose hyperbolic tanget is the specified number.",
        "parameters": [
          {
            "name": "x",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "clamp": {
        "name": "clamp",
        "description": "Clamp a number between a given minimum and maximum",
        "parameters": [
          {
            "name": "x",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "min",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "max",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "clamp_degrees360": {
        "name": "clamp_degrees360",
        "description": "Clamp an angle between 0 and 360 degree",
        "parameters": [
          {
            "name": "angle",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "clamp_degrees180": {
        "name": "clamp_degrees180",
        "description": "Clamp an angle between -180 and 180 degree",
        "parameters": [
          {
            "name": "angle",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "clamp_radians2_pi": {
        "name": "clamp_radians2_pi",
        "description": "Clamp an angle between 0 and 2Ï€",
        "parameters": [
          {
            "name": "angle",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "clamp_radians_pi": {
        "name": "clamp_radians_pi",
        "description": "Clamp an angle between -Ï€ and Ï€",
        "parameters": [
          {
            "name": "angle",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "random": {
        "name": "random",
        "description": "New random number generator",
        "parameters": [],
        "returnType": {
          "kind": "Standard",
          "module": "core::math",
          "name": "Random"
        }
      },
      "random_from_seed": {
        "name": "random_from_seed",
        "description": "New random number generator from given seed",
        "parameters": [
          {
            "name": "seed",
            "type": {
              "kind": "Builtin",
              "name": "int"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "core::math",
          "name": "Random"
        }
      }
    }
  },
  "core::str": {
    "name": "core::str",
    "description": "Provided basic string manipulation and formatting.\n",
    "types": {},
    "constants": {},
    "functions": {
      "join": {
        "name": "join",
        "description": "Join an array of string with a separator.\n",
        "parameters": [
          {
            "name": "separator",
            "type": {
              "kind": "Builtin",
              "name": "string"
            },
            "hasDefault": false
          },
          {
            "name": "items",
            "type": {
              "kind": "Standard",
              "module": "",
              "name": "string[]"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "string"
        }
      },
      "format": {
        "name": "format",
        "description": "Format items using C# format strings (https://learn.microsoft.com/en-us/dotnet/api/system.string.format). Items can be either a single value, an array or a tuple.\n",
        "parameters": [
          {
            "name": "format",
            "type": {
              "kind": "Builtin",
              "name": "string"
            },
            "hasDefault": false
          },
          {
            "name": "items",
            "type": {
              "kind": "Generic",
              "name": "T"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "string"
        }
      }
    }
  },
  "core::testing": {
    "name": "core::testing",
    "description": "Provides basic assertions for testing. All functions provided by this module should be only used by `test` function.\n",
    "types": {},
    "constants": {},
    "functions": {
      "assert_true": {
        "name": "assert_true",
        "description": "Assert that `actual` is true (Test only)\n",
        "parameters": [
          {
            "name": "actual",
            "type": {
              "kind": "Builtin",
              "name": "bool"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "assert_false": {
        "name": "assert_false",
        "description": "Assert that `actual` is false (Test only)\n",
        "parameters": [
          {
            "name": "actual",
            "type": {
              "kind": "Builtin",
              "name": "bool"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "assert_string": {
        "name": "assert_string",
        "description": "Assert that `actual` string is equal to `expected` (Test only)\n",
        "parameters": [
          {
            "name": "expected",
            "type": {
              "kind": "Builtin",
              "name": "string"
            },
            "hasDefault": false
          },
          {
            "name": "actual",
            "type": {
              "kind": "Builtin",
              "name": "string"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "assert_int": {
        "name": "assert_int",
        "description": "Assert that `actual` integer is equal to `expected` (Test only)\n",
        "parameters": [
          {
            "name": "expected",
            "type": {
              "kind": "Builtin",
              "name": "int"
            },
            "hasDefault": false
          },
          {
            "name": "actual",
            "type": {
              "kind": "Builtin",
              "name": "int"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "assert_float": {
        "name": "assert_float",
        "description": "Assert that `actual` float is almost equal to `expected` with an absolute tolerance of `delta` (Test only)\n",
        "parameters": [
          {
            "name": "expected",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "actual",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "delta",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": true
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "assert_some": {
        "name": "assert_some",
        "description": null,
        "parameters": [
          {
            "name": "expected",
            "type": {
              "kind": "Generic",
              "name": "T"
            },
            "hasDefault": false
          },
          {
            "name": "actual",
            "type": {
              "kind": "Standard",
              "module": "",
              "name": "Option<T>"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "assert_none": {
        "name": "assert_none",
        "description": null,
        "parameters": [
          {
            "name": "actual",
            "type": {
              "kind": "Standard",
              "module": "",
              "name": "Option<T>"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "fail_test": {
        "name": "fail_test",
        "description": "Fail the test case with a `message` (Test only).\n",
        "parameters": [
          {
            "name": "message",
            "type": {
              "kind": "Builtin",
              "name": "string"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "assert_yield": {
        "name": "assert_yield",
        "description": "Assert that test case has yielded `expected` number of times already (Async test only)\n",
        "parameters": [
          {
            "name": "expected",
            "type": {
              "kind": "Builtin",
              "name": "int"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "yield": {
        "name": "yield",
        "description": "Yield the test case (Async test only)\n",
        "parameters": [],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "test_sleep": {
        "name": "test_sleep",
        "description": "Suspend execution for `millis`\n",
        "parameters": [
          {
            "name": "millis",
            "type": {
              "kind": "Builtin",
              "name": "int"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      }
    }
  },
  "ksp::console": {
    "name": "ksp::console",
    "description": "Provides functions to interact with the in-game KontrolSystem Console. As of now the console is output- and monochrome-only, this might change in the future.\n\nAdditionally there is support for displaying popup messages on the HUD.\n\n",
    "types": {
      "Console": {
        "name": "Console",
        "description": "Representation of a console\n",
        "fields": {
          "cursor_row": {
            "name": "cursor_row",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "int"
            }
          },
          "cursor_col": {
            "name": "cursor_col",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "int"
            }
          }
        },
        "methods": {
          "clear": {
            "name": "clear",
            "description": "Clear the console of all its content and move cursor to (0, 0).\n",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "print": {
            "name": "print",
            "description": "Print a message at the current cursor position (and move cursor forward)\n",
            "parameters": [
              {
                "name": "message",
                "type": {
                  "kind": "Builtin",
                  "name": "string"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "print_line": {
            "name": "print_line",
            "description": "Print a message at the current cursor position and move cursor to the beginning of the next line.\n",
            "parameters": [
              {
                "name": "message",
                "type": {
                  "kind": "Builtin",
                  "name": "string"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "print_at": {
            "name": "print_at",
            "description": "Moves the cursor to the specified position, prints the message and restores the previous cursor position\n",
            "parameters": [
              {
                "name": "row",
                "type": {
                  "kind": "Builtin",
                  "name": "int"
                },
                "hasDefault": false
              },
              {
                "name": "column",
                "type": {
                  "kind": "Builtin",
                  "name": "int"
                },
                "hasDefault": false
              },
              {
                "name": "message",
                "type": {
                  "kind": "Builtin",
                  "name": "string"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "move_cursor": {
            "name": "move_cursor",
            "description": "Move the cursor to a give `row` and `column`.\n",
            "parameters": [
              {
                "name": "row",
                "type": {
                  "kind": "Builtin",
                  "name": "int"
                },
                "hasDefault": false
              },
              {
                "name": "column",
                "type": {
                  "kind": "Builtin",
                  "name": "int"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "clear_line": {
            "name": "clear_line",
            "description": "Clear a line\n",
            "parameters": [
              {
                "name": "row",
                "type": {
                  "kind": "Builtin",
                  "name": "int"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          }
        }
      },
      "RgbaColor": {
        "name": "RgbaColor",
        "description": "Interface color with alpha channel.\n",
        "fields": {
          "red": {
            "name": "red",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "green": {
            "name": "green",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "blue": {
            "name": "blue",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "alpha": {
            "name": "alpha",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          }
        },
        "methods": {}
      }
    },
    "constants": {
      "WHITE": {
        "name": "WHITE",
        "description": "Color red\n",
        "type": {
          "kind": "Standard",
          "module": "ksp::console",
          "name": "RgbaColor"
        }
      },
      "RED": {
        "name": "RED",
        "description": "Color red\n",
        "type": {
          "kind": "Standard",
          "module": "ksp::console",
          "name": "RgbaColor"
        }
      },
      "YELLOW": {
        "name": "YELLOW",
        "description": "Color yellow\n",
        "type": {
          "kind": "Standard",
          "module": "ksp::console",
          "name": "RgbaColor"
        }
      },
      "GREEN": {
        "name": "GREEN",
        "description": "Color green\n",
        "type": {
          "kind": "Standard",
          "module": "ksp::console",
          "name": "RgbaColor"
        }
      },
      "CYAN": {
        "name": "CYAN",
        "description": "Color cyan\n",
        "type": {
          "kind": "Standard",
          "module": "ksp::console",
          "name": "RgbaColor"
        }
      },
      "BLUE": {
        "name": "BLUE",
        "description": "Color blue\n",
        "type": {
          "kind": "Standard",
          "module": "ksp::console",
          "name": "RgbaColor"
        }
      },
      "CONSOLE": {
        "name": "CONSOLE",
        "description": "Main console\n",
        "type": {
          "kind": "Standard",
          "module": "ksp::console",
          "name": "Console"
        }
      }
    },
    "functions": {
      "color": {
        "name": "color",
        "description": "Create a new color from `red`, `green`, `blue` and `alpha` (0.0 - 1.0).\n",
        "parameters": [
          {
            "name": "red",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "green",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "blue",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "alpha",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "ksp::console",
          "name": "RgbaColor"
        }
      }
    }
  },
  "ksp::control": {
    "name": "ksp::control",
    "description": null,
    "types": {
      "MovingAverage": {
        "name": "MovingAverage",
        "description": null,
        "fields": {
          "mean": {
            "name": "mean",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "mean_diff": {
            "name": "mean_diff",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "value_count": {
            "name": "value_count",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "int"
            }
          },
          "sample_limit": {
            "name": "sample_limit",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "int"
            }
          },
          "last_sample_time": {
            "name": "last_sample_time",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          }
        },
        "methods": {
          "reset": {
            "name": "reset",
            "description": null,
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "update_delta": {
            "name": "update_delta",
            "description": null,
            "parameters": [
              {
                "name": "deltaT",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "input",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "update": {
            "name": "update",
            "description": null,
            "parameters": [
              {
                "name": "sampleTime",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "value",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          }
        }
      },
      "PIDLoop": {
        "name": "PIDLoop",
        "description": null,
        "fields": {
          "last_sample_time": {
            "name": "last_sample_time",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "kp": {
            "name": "kp",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "ki": {
            "name": "ki",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "kd": {
            "name": "kd",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "input": {
            "name": "input",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "setpoint": {
            "name": "setpoint",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "error": {
            "name": "error",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "output": {
            "name": "output",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "max_output": {
            "name": "max_output",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "min_output": {
            "name": "min_output",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "error_sum": {
            "name": "error_sum",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "p_term": {
            "name": "p_term",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "i_term": {
            "name": "i_term",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "d_term": {
            "name": "d_term",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "extra_unwind": {
            "name": "extra_unwind",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "change_rate": {
            "name": "change_rate",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          }
        },
        "methods": {
          "update_delta": {
            "name": "update_delta",
            "description": null,
            "parameters": [
              {
                "name": "deltaT",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "input",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "update": {
            "name": "update",
            "description": null,
            "parameters": [
              {
                "name": "sampleTime",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "input",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "reset_i": {
            "name": "reset_i",
            "description": "Reset the integral part of the PID loop\n",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          }
        }
      },
      "RCSTranslateManager": {
        "name": "RCSTranslateManager",
        "description": null,
        "fields": {
          "translate": {
            "name": "translate",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          }
        },
        "methods": {
          "set_translate_provider": {
            "name": "set_translate_provider",
            "description": null,
            "parameters": [
              {
                "name": "newTranslateProvider",
                "type": {
                  "kind": "Standard",
                  "module": "sync fn(float) -> ksp::math",
                  "name": "Vec3"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "release": {
            "name": "release",
            "description": null,
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "resume": {
            "name": "resume",
            "description": null,
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          }
        }
      },
      "SteeringManager": {
        "name": "SteeringManager",
        "description": null,
        "fields": {
          "pitch_yaw_roll": {
            "name": "pitch_yaw_roll",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          }
        },
        "methods": {
          "set_pitch_yaw_roll_provider": {
            "name": "set_pitch_yaw_roll_provider",
            "description": null,
            "parameters": [
              {
                "name": "newPitchYawRollProvider",
                "type": {
                  "kind": "Standard",
                  "module": "sync fn(float) -> ksp::math",
                  "name": "Vec3"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "release": {
            "name": "release",
            "description": null,
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "resume": {
            "name": "resume",
            "description": null,
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          }
        }
      },
      "ThrottleManager": {
        "name": "ThrottleManager",
        "description": null,
        "fields": {
          "throttle": {
            "name": "throttle",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          }
        },
        "methods": {
          "set_throttle_provider": {
            "name": "set_throttle_provider",
            "description": null,
            "parameters": [
              {
                "name": "newThrottleProvider",
                "type": {
                  "kind": "Standard",
                  "module": "",
                  "name": "sync fn(float) -> float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "release": {
            "name": "release",
            "description": null,
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "resume": {
            "name": "resume",
            "description": null,
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          }
        }
      },
      "TorquePI": {
        "name": "TorquePI",
        "description": null,
        "fields": {
          "loop": {
            "name": "loop",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::control",
              "name": "PIDLoop"
            }
          },
          "I": {
            "name": "I",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "tr": {
            "name": "tr",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "ts": {
            "name": "ts",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          }
        },
        "methods": {
          "update_delta": {
            "name": "update_delta",
            "description": null,
            "parameters": [
              {
                "name": "deltaT",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "input",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "setpoint",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "momentOfInertia",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "maxOutput",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "update": {
            "name": "update",
            "description": null,
            "parameters": [
              {
                "name": "sampleTime",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "input",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "setpoint",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "momentOfInertia",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "maxOutput",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "reset_i": {
            "name": "reset_i",
            "description": "Reset the integral part of the PID loop\n",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          }
        }
      },
      "WheelSteeringManager": {
        "name": "WheelSteeringManager",
        "description": null,
        "fields": {
          "wheel_steer": {
            "name": "wheel_steer",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          }
        },
        "methods": {
          "set_wheel_steer_provider": {
            "name": "set_wheel_steer_provider",
            "description": null,
            "parameters": [
              {
                "name": "newWheelSteerProvider",
                "type": {
                  "kind": "Standard",
                  "module": "",
                  "name": "sync fn(float) -> float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "release": {
            "name": "release",
            "description": null,
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "resume": {
            "name": "resume",
            "description": null,
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          }
        }
      },
      "WheelThrottleManager": {
        "name": "WheelThrottleManager",
        "description": null,
        "fields": {
          "wheel_throttle": {
            "name": "wheel_throttle",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          }
        },
        "methods": {
          "set_wheel_throttle_provider": {
            "name": "set_wheel_throttle_provider",
            "description": null,
            "parameters": [
              {
                "name": "newWheelThrottleProvider",
                "type": {
                  "kind": "Standard",
                  "module": "",
                  "name": "sync fn(float) -> float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "release": {
            "name": "release",
            "description": null,
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "resume": {
            "name": "resume",
            "description": null,
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          }
        }
      }
    },
    "constants": {},
    "functions": {
      "pid_loop": {
        "name": "pid_loop",
        "description": "Create a new PIDLoop with given parameters.\n",
        "parameters": [
          {
            "name": "kp",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "ki",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "kd",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "minOutput",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "maxOutput",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "extraUnwind",
            "type": {
              "kind": "Builtin",
              "name": "bool"
            },
            "hasDefault": true
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "ksp::control",
          "name": "PIDLoop"
        }
      },
      "moving_average": {
        "name": "moving_average",
        "description": "Create a new MovingAverage with given sample limit.\n",
        "parameters": [
          {
            "name": "sampleLimit",
            "type": {
              "kind": "Builtin",
              "name": "int"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "ksp::control",
          "name": "MovingAverage"
        }
      },
      "torque_pi": {
        "name": "torque_pi",
        "description": "Create a new TorquePI with given parameters.\n",
        "parameters": [
          {
            "name": "ts",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "ksp::control",
          "name": "TorquePI"
        }
      }
    }
  },
  "ksp::debug": {
    "name": "ksp::debug",
    "description": "Provides utility functions to draw in-game markers that can be helpful to visualize why an algorithm went haywire.\n",
    "types": {
      "DebugBillboard": {
        "name": "DebugBillboard",
        "description": "Represents a ground marker on a given celestial body.\n",
        "fields": {
          "color": {
            "name": "color",
            "description": "The color of the billboard text\n",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::console",
              "name": "RgbaColor"
            }
          },
          "font_size": {
            "name": "font_size",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "int"
            }
          },
          "visible": {
            "name": "visible",
            "description": "Controls if the billboard is currently visible (initially `true`)\n",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          }
        },
        "methods": {
          "remove": {
            "name": "remove",
            "description": null,
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          }
        }
      },
      "Debug": {
        "name": "Debug",
        "description": "Collection of debug helper\n",
        "fields": {},
        "methods": {
          "add_line": {
            "name": "add_line",
            "description": "Draws a line from `start` to `end` with a specified `color` and `width` in the current game scene.\nThe line may have a `label` at its mid-point.\n\n",
            "parameters": [
              {
                "name": "startProvider",
                "type": {
                  "kind": "Standard",
                  "module": "sync fn() -> ksp::math",
                  "name": "GlobalPosition"
                },
                "hasDefault": false
              },
              {
                "name": "endProvider",
                "type": {
                  "kind": "Standard",
                  "module": "sync fn() -> ksp::math",
                  "name": "GlobalPosition"
                },
                "hasDefault": false
              },
              {
                "name": "color",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::console",
                  "name": "RgbaColor"
                },
                "hasDefault": false
              },
              {
                "name": "label",
                "type": {
                  "kind": "Builtin",
                  "name": "string"
                },
                "hasDefault": false
              },
              {
                "name": "width",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::debug",
              "name": "DebugVector"
            }
          },
          "add_vector": {
            "name": "add_vector",
            "description": "Draws a `vector` positioned at `start` with a specified `color` and `width` in the current game scene.\nThe vector may have a `label` at its mid-point.\n\n",
            "parameters": [
              {
                "name": "startProvider",
                "type": {
                  "kind": "Standard",
                  "module": "sync fn() -> ksp::math",
                  "name": "GlobalPosition"
                },
                "hasDefault": false
              },
              {
                "name": "vectorProvider",
                "type": {
                  "kind": "Standard",
                  "module": "sync fn() -> ksp::math",
                  "name": "GlobalVector"
                },
                "hasDefault": false
              },
              {
                "name": "color",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::console",
                  "name": "RgbaColor"
                },
                "hasDefault": false
              },
              {
                "name": "label",
                "type": {
                  "kind": "Builtin",
                  "name": "string"
                },
                "hasDefault": false
              },
              {
                "name": "width",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::debug",
              "name": "DebugVector"
            }
          },
          "add_ground_marker": {
            "name": "add_ground_marker",
            "description": null,
            "parameters": [
              {
                "name": "geoCoordinates",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::orbit",
                  "name": "GeoCoordinates"
                },
                "hasDefault": false
              },
              {
                "name": "color",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::console",
                  "name": "RgbaColor"
                },
                "hasDefault": false
              },
              {
                "name": "rotation",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::debug",
              "name": "GroundMarker"
            }
          },
          "add_billboard": {
            "name": "add_billboard",
            "description": null,
            "parameters": [
              {
                "name": "positionProvider",
                "type": {
                  "kind": "Standard",
                  "module": "sync fn() -> ksp::math",
                  "name": "GlobalPosition"
                },
                "hasDefault": false
              },
              {
                "name": "textProvider",
                "type": {
                  "kind": "Standard",
                  "module": "",
                  "name": "sync fn() -> string"
                },
                "hasDefault": false
              },
              {
                "name": "color",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::console",
                  "name": "RgbaColor"
                },
                "hasDefault": false
              },
              {
                "name": "fontSize",
                "type": {
                  "kind": "Builtin",
                  "name": "int"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::debug",
              "name": "DebugBillboard"
            }
          },
          "add_path": {
            "name": "add_path",
            "description": null,
            "parameters": [
              {
                "name": "path",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "GlobalPosition[]"
                },
                "hasDefault": false
              },
              {
                "name": "color",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::console",
                  "name": "RgbaColor"
                },
                "hasDefault": false
              },
              {
                "name": "width",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::debug",
              "name": "DebugPath"
            }
          },
          "clear_markers": {
            "name": "clear_markers",
            "description": "Remove all markers from the game-scene.\n",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          }
        }
      },
      "GroundMarker": {
        "name": "GroundMarker",
        "description": "Represents a ground marker on a given celestial body.\n",
        "fields": {
          "visible": {
            "name": "visible",
            "description": "Controls if the ground marker is currently visible (initially `true`)\n",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "rotation": {
            "name": "rotation",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "geo_coordinates": {
            "name": "geo_coordinates",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "GeoCoordinates"
            }
          },
          "color": {
            "name": "color",
            "description": "The color of the ground marker vector\n",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::console",
              "name": "RgbaColor"
            }
          }
        },
        "methods": {
          "remove": {
            "name": "remove",
            "description": null,
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          }
        }
      },
      "DebugPath": {
        "name": "DebugPath",
        "description": "Represents a debugging path in the current scene.\n",
        "fields": {
          "color": {
            "name": "color",
            "description": "The color of the debugging path\n",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::console",
              "name": "RgbaColor"
            }
          },
          "width": {
            "name": "width",
            "description": "The width of the debugging path\n",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "path": {
            "name": "path",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalPosition[]"
            }
          },
          "visible": {
            "name": "visible",
            "description": "Controls if the debug path is currently visible (initially `true`)\n",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          }
        },
        "methods": {
          "remove": {
            "name": "remove",
            "description": null,
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          }
        }
      },
      "DebugVector": {
        "name": "DebugVector",
        "description": "Represents a debugging vector in the current scene.\n",
        "fields": {
          "color": {
            "name": "color",
            "description": "The color of the debugging vector\n",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::console",
              "name": "RgbaColor"
            }
          },
          "scale": {
            "name": "scale",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "width": {
            "name": "width",
            "description": "The width of the debugging vector\n",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "pointy": {
            "name": "pointy",
            "description": "Controls if an arrow should be drawn at the end.\n",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "visible": {
            "name": "visible",
            "description": "Controls if the debug-vector is currently visible (initially `true`)\n",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "start": {
            "name": "start",
            "description": "The current starting position of the debugging vector.\n",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalPosition"
            }
          },
          "end": {
            "name": "end",
            "description": "The current end position of the debugging vector.\n",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalPosition"
            }
          }
        },
        "methods": {
          "remove": {
            "name": "remove",
            "description": null,
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "set_start_provider": {
            "name": "set_start_provider",
            "description": "Change the function providing the start position of the debug vector.\n",
            "parameters": [
              {
                "name": "startProvider",
                "type": {
                  "kind": "Standard",
                  "module": "sync fn() -> ksp::math",
                  "name": "GlobalPosition"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "set_end_provider": {
            "name": "set_end_provider",
            "description": "Change the function providing the end position of the debug vector.\n",
            "parameters": [
              {
                "name": "endProvider",
                "type": {
                  "kind": "Standard",
                  "module": "sync fn() -> ksp::math",
                  "name": "GlobalPosition"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "set_vector_provider": {
            "name": "set_vector_provider",
            "description": "Change the function providing the vector/direction of the debug vector.\n",
            "parameters": [
              {
                "name": "vectorProvider",
                "type": {
                  "kind": "Standard",
                  "module": "sync fn() -> ksp::math",
                  "name": "GlobalVector"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          }
        }
      }
    },
    "constants": {
      "DEBUG": {
        "name": "DEBUG",
        "description": "Collection of debug helper\n",
        "type": {
          "kind": "Standard",
          "module": "ksp::debug",
          "name": "Debug"
        }
      }
    },
    "functions": {}
  },
  "ksp::game": {
    "name": "ksp::game",
    "description": "Collection to game and runtime related functions.\n",
    "types": {},
    "constants": {},
    "functions": {
      "current_time": {
        "name": "current_time",
        "description": "Get the current universal time (UT) in seconds from start.\n",
        "parameters": [],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "yield": {
        "name": "yield",
        "description": "Yield execution to allow Unity to do some other stuff inbetween.\n",
        "parameters": [],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "sleep": {
        "name": "sleep",
        "description": "Stop execution of given number of seconds (factions of a seconds are supported as well).\n",
        "parameters": [
          {
            "name": "seconds",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "wait_until": {
        "name": "wait_until",
        "description": "Stop execution until a given condition is met.\n",
        "parameters": [
          {
            "name": "predicate",
            "type": {
              "kind": "Standard",
              "module": "",
              "name": "sync fn() -> bool"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "wait_while": {
        "name": "wait_while",
        "description": "Stop execution as long as a given condition is met.\n",
        "parameters": [
          {
            "name": "predicate",
            "type": {
              "kind": "Standard",
              "module": "",
              "name": "sync fn() -> bool"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      }
    }
  },
  "ksp::game::warp": {
    "name": "ksp::game::warp",
    "description": "Collection of functions to control time warp.\n",
    "types": {},
    "constants": {},
    "functions": {
      "current_index": {
        "name": "current_index",
        "description": "Get the current warp index. Actual factor depends on warp mode.\n",
        "parameters": [],
        "returnType": {
          "kind": "Builtin",
          "name": "int"
        }
      },
      "current_rate": {
        "name": "current_rate",
        "description": "Get the current warp rate (i.e. actual time multiplier).\n",
        "parameters": [],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "warp_to": {
        "name": "warp_to",
        "description": "Warp forward to a specific universal time.\n",
        "parameters": [
          {
            "name": "ut",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "cancel": {
        "name": "cancel",
        "description": "Cancel time warp\n",
        "parameters": [],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      }
    }
  },
  "ksp::math": {
    "name": "ksp::math",
    "description": "Collection of KSP/Unity related mathematical functions.",
    "types": {
      "Vec2": {
        "name": "Vec2",
        "description": "A 2-dimensional vector.",
        "fields": {
          "magnitude": {
            "name": "magnitude",
            "description": "Magnitude/length of the vector",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "sqr_magnitude": {
            "name": "sqr_magnitude",
            "description": "Squared magnitude of the vector",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "normalized": {
            "name": "normalized",
            "description": "Normalized vector (i.e. scaled to length 1)",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec2"
            }
          },
          "x": {
            "name": "x",
            "description": "x-coordinate",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "y": {
            "name": "y",
            "description": "y-coordinate",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          }
        },
        "methods": {
          "angle_to": {
            "name": "angle_to",
            "description": "Calculate the angle in degree to `other` vector.",
            "parameters": [
              {
                "name": "other",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "Vec2"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "to_string": {
            "name": "to_string",
            "description": "Convert the vector to string",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "to_fixed": {
            "name": "to_fixed",
            "description": "Convert the vector to string with fixed number of `decimals`.",
            "parameters": [
              {
                "name": "decimals",
                "type": {
                  "kind": "Builtin",
                  "name": "int"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "string"
            }
          }
        }
      },
      "Vec3": {
        "name": "Vec3",
        "description": "A 3-dimensional vector.",
        "fields": {
          "magnitude": {
            "name": "magnitude",
            "description": "Magnitude/length of the vector",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "sqr_magnitude": {
            "name": "sqr_magnitude",
            "description": "Squared magnitude of the vector",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "normalized": {
            "name": "normalized",
            "description": "Normalized vector (i.e. scaled to length 1)",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "xzy": {
            "name": "xzy",
            "description": "Swapped y- and z-coordinate",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "x": {
            "name": "x",
            "description": "x-coordinate",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "y": {
            "name": "y",
            "description": "y-coordinate",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "z": {
            "name": "z",
            "description": "z-coordinate",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          }
        },
        "methods": {
          "cross": {
            "name": "cross",
            "description": "Calculate the cross/other product with `other` vector.",
            "parameters": [
              {
                "name": "other",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "Vec3"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "dot": {
            "name": "dot",
            "description": "Calculate the dot/inner product with `other` vector.",
            "parameters": [
              {
                "name": "other",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "Vec3"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "angle_to": {
            "name": "angle_to",
            "description": "Calculate the angle in degree to `other` vector.",
            "parameters": [
              {
                "name": "other",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "Vec3"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "lerp_to": {
            "name": "lerp_to",
            "description": "Linear interpolate position between this and `other` vector, where `t = 0.0` is this and `t = 1.0` is `other`.",
            "parameters": [
              {
                "name": "other",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "Vec3"
                },
                "hasDefault": false
              },
              {
                "name": "t",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "project_to": {
            "name": "project_to",
            "description": "Project this on `other` vector.",
            "parameters": [
              {
                "name": "other",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "Vec3"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "distance_to": {
            "name": "distance_to",
            "description": "Calculate the distance between this and `other` vector.",
            "parameters": [
              {
                "name": "other",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "Vec3"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "exclude_from": {
            "name": "exclude_from",
            "description": "Exclude this from `other` vector.",
            "parameters": [
              {
                "name": "other",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "Vec3"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "to_string": {
            "name": "to_string",
            "description": "Convert vector to string.",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "to_fixed": {
            "name": "to_fixed",
            "description": "Convert the vector to string with fixed number of `decimals`.",
            "parameters": [
              {
                "name": "decimals",
                "type": {
                  "kind": "Builtin",
                  "name": "int"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "to_position": {
            "name": "to_position",
            "description": "Consider this vector as position in a coordinate system",
            "parameters": [
              {
                "name": "frame",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "TransformFrame"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalPosition"
            }
          },
          "to_global": {
            "name": "to_global",
            "description": "Associate this vector with a coordinate system",
            "parameters": [
              {
                "name": "frame",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "TransformFrame"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            }
          },
          "to_direction": {
            "name": "to_direction",
            "description": "Point in direction of this vector.",
            "parameters": [],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Direction"
            }
          }
        }
      },
      "Direction": {
        "name": "Direction",
        "description": "Represents the rotation from an initial coordinate system when looking down the z-axis and \"up\" being the y-axis",
        "fields": {
          "euler": {
            "name": "euler",
            "description": "Euler angles in degree of the rotation",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "vector": {
            "name": "vector",
            "description": "Fore vector of the rotation (i.e. looking/facing direction",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "up_vector": {
            "name": "up_vector",
            "description": "Up vector of the rotation",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "right_vector": {
            "name": "right_vector",
            "description": "Right vector of the rotation",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "pitch": {
            "name": "pitch",
            "description": "Pitch in degree",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "yaw": {
            "name": "yaw",
            "description": "Yaw in degree",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "roll": {
            "name": "roll",
            "description": "Roll in degree",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "inverse": {
            "name": "inverse",
            "description": "Inverse direction",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Direction"
            }
          }
        },
        "methods": {
          "to_string": {
            "name": "to_string",
            "description": "Convert the direction to string",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "to_global": {
            "name": "to_global",
            "description": "Associate this direction with a coordinate system",
            "parameters": [
              {
                "name": "frame",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "TransformFrame"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalDirection"
            }
          }
        }
      },
      "Matrix2x2": {
        "name": "Matrix2x2",
        "description": "A 2-dimensional matrix.",
        "fields": {
          "determinant": {
            "name": "determinant",
            "description": "Get determinant of matrix",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "inverse": {
            "name": "inverse",
            "description": "Invert matrix",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Matrix2x2"
            }
          },
          "a": {
            "name": "a",
            "description": "a",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "b": {
            "name": "b",
            "description": "b",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "c": {
            "name": "c",
            "description": "c",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "d": {
            "name": "d",
            "description": "d",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          }
        },
        "methods": {}
      },
      "GlobalAngularVelocity": {
        "name": "GlobalAngularVelocity",
        "description": "An angular velocity in space, that can be projected to a 3-dimensional vector in a specific frame of reference",
        "fields": {},
        "methods": {
          "to_local": {
            "name": "to_local",
            "description": "Get local angular velocity in a frame of reference",
            "parameters": [
              {
                "name": "frame",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "TransformFrame"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "to_string": {
            "name": "to_string",
            "description": "Convert angular velocity to string in a given coordinate system.",
            "parameters": [
              {
                "name": "frame",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "TransformFrame"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "to_fixed": {
            "name": "to_fixed",
            "description": "Convert angular velocity to string with fixed number of `decimals` in a given coordinate system.",
            "parameters": [
              {
                "name": "frame",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "TransformFrame"
                },
                "hasDefault": false
              },
              {
                "name": "decimals",
                "type": {
                  "kind": "Builtin",
                  "name": "int"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "relative_to": {
            "name": "relative_to",
            "description": "Get relative angular velocity to a frame of reference",
            "parameters": [
              {
                "name": "frame",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "TransformFrame"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            }
          }
        }
      },
      "GlobalPosition": {
        "name": "GlobalPosition",
        "description": "A position in space that can be projected to a 3-dimensional vector in a specific coordinate system",
        "fields": {},
        "methods": {
          "to_local": {
            "name": "to_local",
            "description": "Get local vector in a coordinate system",
            "parameters": [
              {
                "name": "frame",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "TransformFrame"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "to_string": {
            "name": "to_string",
            "description": "Convert vector to string in a given coordinate system.",
            "parameters": [
              {
                "name": "frame",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "TransformFrame"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "to_fixed": {
            "name": "to_fixed",
            "description": "Convert the vector to string with fixed number of `decimals` in a given coordinate system.",
            "parameters": [
              {
                "name": "frame",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "TransformFrame"
                },
                "hasDefault": false
              },
              {
                "name": "decimals",
                "type": {
                  "kind": "Builtin",
                  "name": "int"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "distance": {
            "name": "distance",
            "description": "Calculate the distance of `other` position.",
            "parameters": [
              {
                "name": "other",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "GlobalPosition"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "distance_sqr": {
            "name": "distance_sqr",
            "description": "Calculate the squared distance of `other` position.",
            "parameters": [
              {
                "name": "other",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "GlobalPosition"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "lerp_to": {
            "name": "lerp_to",
            "description": "Linear interpolate position between this and `other` position, where `t = 0.0` is this and `t = 1.0` is `other`.",
            "parameters": [
              {
                "name": "other",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "GlobalPosition"
                },
                "hasDefault": false
              },
              {
                "name": "t",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalPosition"
            }
          }
        }
      },
      "TransformFrame": {
        "name": "TransformFrame",
        "description": "Representation of a coordinate frame of reference",
        "fields": {
          "forward": {
            "name": "forward",
            "description": "forward vector of the coordinate system",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            }
          },
          "back": {
            "name": "back",
            "description": "backward vector of the coordinate system",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            }
          },
          "up": {
            "name": "up",
            "description": "up vector of the coordinate system",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            }
          },
          "down": {
            "name": "down",
            "description": "down vector of the coordinate system",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            }
          },
          "right": {
            "name": "right",
            "description": "right vector of the coordinate system",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            }
          },
          "left": {
            "name": "left",
            "description": "left vector of the coordinate system",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            }
          }
        },
        "methods": {
          "to_local_position": {
            "name": "to_local_position",
            "description": "Get local coordinates of a position",
            "parameters": [
              {
                "name": "position",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "GlobalPosition"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "to_local_vector": {
            "name": "to_local_vector",
            "description": "Get local coordinates of a vector",
            "parameters": [
              {
                "name": "vector",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "GlobalVector"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "to_local_velocity": {
            "name": "to_local_velocity",
            "description": "Get local coordinates of a velocity",
            "parameters": [
              {
                "name": "velocity",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "GlobalVelocity"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          }
        }
      },
      "GlobalVector": {
        "name": "GlobalVector",
        "description": "Abstract vector in space that can be projected to a concrete 3-dimensional vector in a specific coordinate system",
        "fields": {
          "magnitude": {
            "name": "magnitude",
            "description": "Magnitude/length of the vector",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "sqr_magnitude": {
            "name": "sqr_magnitude",
            "description": "Squared magnitude of the vector",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "normalized": {
            "name": "normalized",
            "description": "Normalized vector (i.e. scaled to length 1)",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            }
          }
        },
        "methods": {
          "to_local": {
            "name": "to_local",
            "description": "Get local vector in a coordinate system",
            "parameters": [
              {
                "name": "frame",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "TransformFrame"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "to_string": {
            "name": "to_string",
            "description": "Convert vector to string in a given coordinate system.",
            "parameters": [
              {
                "name": "frame",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "TransformFrame"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "to_fixed": {
            "name": "to_fixed",
            "description": "Convert the vector to string with fixed number of `decimals` in a given coordinate system.",
            "parameters": [
              {
                "name": "frame",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "TransformFrame"
                },
                "hasDefault": false
              },
              {
                "name": "decimals",
                "type": {
                  "kind": "Builtin",
                  "name": "int"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "to_direction": {
            "name": "to_direction",
            "description": "Convert the vector to a rotation/direction in space.",
            "parameters": [],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalDirection"
            }
          },
          "cross": {
            "name": "cross",
            "description": "Calculate the cross/other product with `other` vector.",
            "parameters": [
              {
                "name": "other",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "GlobalVector"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            }
          },
          "dot": {
            "name": "dot",
            "description": "Calculate the dot/inner product with `other` vector.",
            "parameters": [
              {
                "name": "other",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "GlobalVector"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "lerp_to": {
            "name": "lerp_to",
            "description": "Linear interpolate position between this and `other` vector, where `t = 0.0` is this and `t = 1.0` is `other`.",
            "parameters": [
              {
                "name": "other",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "GlobalVector"
                },
                "hasDefault": false
              },
              {
                "name": "t",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            }
          },
          "exclude_from": {
            "name": "exclude_from",
            "description": "Exclude this from `other` vector.",
            "parameters": [
              {
                "name": "other",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "GlobalVector"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            }
          }
        }
      },
      "GlobalVelocity": {
        "name": "GlobalVelocity",
        "description": "A velocity in space, that can be projected to a 3-dimensional vector in a specific frame of reference",
        "fields": {
          "position": {
            "name": "position",
            "description": "Position the velocity was measured at",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalPosition"
            }
          },
          "vector": {
            "name": "vector",
            "description": "Relative velocity vector",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            }
          }
        },
        "methods": {
          "to_relative": {
            "name": "to_relative",
            "description": "Get relative velocity to frame of reference",
            "parameters": [
              {
                "name": "frame",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "TransformFrame"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            }
          },
          "to_local": {
            "name": "to_local",
            "description": "Get local velocity in a frame of reference",
            "parameters": [
              {
                "name": "frame",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "TransformFrame"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "to_string": {
            "name": "to_string",
            "description": "Convert vector to string in a given coordinate system.",
            "parameters": [
              {
                "name": "frame",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "TransformFrame"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "to_fixed": {
            "name": "to_fixed",
            "description": "Convert the vector to string with fixed number of `decimals` in a given coordinate system.",
            "parameters": [
              {
                "name": "frame",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "TransformFrame"
                },
                "hasDefault": false
              },
              {
                "name": "decimals",
                "type": {
                  "kind": "Builtin",
                  "name": "int"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "string"
            }
          }
        }
      },
      "GlobalDirection": {
        "name": "GlobalDirection",
        "description": "Represents the rotation from an initial coordinate system when looking down the z-axis and \"up\" being the y-axis",
        "fields": {
          "vector": {
            "name": "vector",
            "description": "Fore vector of the rotation (i.e. looking/facing direction",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            }
          },
          "up_vector": {
            "name": "up_vector",
            "description": "Up vector of the rotation",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            }
          },
          "right_vector": {
            "name": "right_vector",
            "description": "Right vector of the rotation",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            }
          }
        },
        "methods": {
          "euler": {
            "name": "euler",
            "description": "Get euler angles in a specific coordinate system",
            "parameters": [
              {
                "name": "frame",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "TransformFrame"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "pitch": {
            "name": "pitch",
            "description": "Get pitch angle in a specific coordinate system",
            "parameters": [
              {
                "name": "frame",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "TransformFrame"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "yaw": {
            "name": "yaw",
            "description": "Get yaw angle in a specific coordinate system",
            "parameters": [
              {
                "name": "frame",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "TransformFrame"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "roll": {
            "name": "roll",
            "description": "Get roll angle in a specific coordinate system",
            "parameters": [
              {
                "name": "frame",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "TransformFrame"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "to_local": {
            "name": "to_local",
            "description": "Get local direction in a coordinate system",
            "parameters": [
              {
                "name": "frame",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "TransformFrame"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Direction"
            }
          },
          "to_string": {
            "name": "to_string",
            "description": "Convert the direction to string",
            "parameters": [
              {
                "name": "frame",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "TransformFrame"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "string"
            }
          }
        }
      }
    },
    "constants": {},
    "functions": {
      "vec2": {
        "name": "vec2",
        "description": "Create a new 2-dimensional vector",
        "parameters": [
          {
            "name": "x",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "y",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "ksp::math",
          "name": "Vec2"
        }
      },
      "vec3": {
        "name": "vec3",
        "description": "Create a new 3-dimensional vector",
        "parameters": [
          {
            "name": "x",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "y",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "z",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "ksp::math",
          "name": "Vec3"
        }
      },
      "euler": {
        "name": "euler",
        "description": "Create a Direction from euler angles in degree",
        "parameters": [
          {
            "name": "x",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "y",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "z",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "ksp::math",
          "name": "Direction"
        }
      },
      "angle_axis": {
        "name": "angle_axis",
        "description": "Create a Direction from a given axis with rotation angle in degree",
        "parameters": [
          {
            "name": "angle",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "axis",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "ksp::math",
          "name": "Direction"
        }
      },
      "from_vector_to_vector": {
        "name": "from_vector_to_vector",
        "description": "Create a Direction to rotate from one vector to another",
        "parameters": [
          {
            "name": "v1",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            },
            "hasDefault": false
          },
          {
            "name": "v2",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "ksp::math",
          "name": "Direction"
        }
      },
      "look_dir_up": {
        "name": "look_dir_up",
        "description": "Create a Direction from a fore-vector and an up-vector",
        "parameters": [
          {
            "name": "lookDirection",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            },
            "hasDefault": false
          },
          {
            "name": "upDirection",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "ksp::math",
          "name": "Direction"
        }
      },
      "global_euler": {
        "name": "global_euler",
        "description": "Create a Direction from euler angles in degree",
        "parameters": [
          {
            "name": "frame",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "TransformFrame"
            },
            "hasDefault": false
          },
          {
            "name": "x",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "y",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "z",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "ksp::math",
          "name": "GlobalDirection"
        }
      },
      "global_angle_axis": {
        "name": "global_angle_axis",
        "description": "Create a Direction from a given axis with rotation angle in degree",
        "parameters": [
          {
            "name": "angle",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "axis",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "ksp::math",
          "name": "GlobalDirection"
        }
      },
      "global_from_vector_to_vector": {
        "name": "global_from_vector_to_vector",
        "description": "Create a Direction to rotate from one vector to another",
        "parameters": [
          {
            "name": "v1",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            },
            "hasDefault": false
          },
          {
            "name": "v2",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "ksp::math",
          "name": "GlobalDirection"
        }
      },
      "global_look_dir_up": {
        "name": "global_look_dir_up",
        "description": "Create a Direction from a fore-vector and an up-vector",
        "parameters": [
          {
            "name": "lookDirection",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            },
            "hasDefault": false
          },
          {
            "name": "upDirection",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "ksp::math",
          "name": "GlobalDirection"
        }
      },
      "angle_delta": {
        "name": "angle_delta",
        "description": "Calculate the difference between to angles in degree (-180 .. 180)",
        "parameters": [
          {
            "name": "a",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "b",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "matrix2x2": {
        "name": "matrix2x2",
        "description": "Create a new 2-dimensional matrix",
        "parameters": [
          {
            "name": "a",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "b",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "c",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "d",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "ksp::math",
          "name": "Matrix2x2"
        }
      },
      "matrix4x4": {
        "name": "matrix4x4",
        "description": "Create a new 4-dimensional matrix",
        "parameters": [],
        "returnType": {
          "kind": "Standard",
          "module": "ksp::math",
          "name": "Matrix4x4"
        }
      }
    }
  },
  "ksp::orbit": {
    "name": "ksp::orbit",
    "description": null,
    "types": {
      "Body": {
        "name": "Body",
        "description": "Represents an in-game celestial body.\n",
        "fields": {
          "name": {
            "name": "name",
            "description": "Name of the celestial body.\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "grav_parameter": {
            "name": "grav_parameter",
            "description": "Standard gravitation parameter of the body.\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "SOI_radius": {
            "name": "SOI_radius",
            "description": "Radius of the sphere of influence of the body\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "orbit": {
            "name": "orbit",
            "description": "The orbit of the celestial body itself (around the parent body)\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            }
          },
          "has_atmosphere": {
            "name": "has_atmosphere",
            "description": "`true` if the celestial body has an atmosphere to deal with.\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "atmosphere_depth": {
            "name": "atmosphere_depth",
            "description": "Depth/height of the atmosphere if present.\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "radius": {
            "name": "radius",
            "description": "Radius of the body at sea level\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "rotation_period": {
            "name": "rotation_period",
            "description": "Rotation period of the planet.\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "celestial_frame": {
            "name": "celestial_frame",
            "description": "The celestial/non-rotating reference frame of the body.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "TransformFrame"
            }
          },
          "body_frame": {
            "name": "body_frame",
            "description": "The body/rotating reference frame of the body.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "TransformFrame"
            }
          },
          "position": {
            "name": "position",
            "description": "The current position of the body\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "global_position": {
            "name": "global_position",
            "description": "The current position of the body (coordinate system independent)\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalPosition"
            }
          },
          "angular_velocity": {
            "name": "angular_velocity",
            "description": "Angular velocity vector of the body\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "global_angular_velocity": {
            "name": "global_angular_velocity",
            "description": "Angular velocity vector of the body (coordinate system independent)\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalAngularVelocity"
            }
          },
          "up": {
            "name": "up",
            "description": "Up vector of the body in its celestial frame\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "right": {
            "name": "right",
            "description": "Right vector of the body in its celestial frame\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "global_up": {
            "name": "global_up",
            "description": "Up vector of the body (coordinate system independent)\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            }
          },
          "global_right": {
            "name": "global_right",
            "description": "Right vector of the body (coordinate system independent)\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            }
          }
        },
        "methods": {
          "surface_normal": {
            "name": "surface_normal",
            "description": "Get the surface normal at a `latitude` and `longitude` (i.e. the vector pointing up at this geo coordinate)\n",
            "parameters": [
              {
                "name": "latitude",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "longitude",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "global_surface_normal": {
            "name": "global_surface_normal",
            "description": "Get the surface normal at a `latitude` and `longitude` (i.e. the vector pointing up at this geo coordinate, coordinate system independent)\n",
            "parameters": [
              {
                "name": "latitude",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "longitude",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            }
          },
          "terrain_height": {
            "name": "terrain_height",
            "description": "Height of the terrain relative to sea-level a a `latitude` and `longitude`\n",
            "parameters": [
              {
                "name": "latitude",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "longitude",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "surface_position": {
            "name": "surface_position",
            "description": "Position of a `latitude` and `longitude` at an altitude relative to sea-level in the celestial frame of the body\n",
            "parameters": [
              {
                "name": "latitude",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "longitude",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "altitude",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "global_surface_position": {
            "name": "global_surface_position",
            "description": "Position of a `latitude` and `longitude` at an altitude relative to sea-level (coordinate system independent)\n",
            "parameters": [
              {
                "name": "latitude",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "longitude",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "altitude",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalPosition"
            }
          },
          "geo_coordinates": {
            "name": "geo_coordinates",
            "description": "Get `GeoCoordinates` struct representing a `latitude` and `longitude` of the body\n",
            "parameters": [
              {
                "name": "latitude",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "longitude",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "GeoCoordinates"
            }
          },
          "create_orbit": {
            "name": "create_orbit",
            "description": "Create a new orbit around this body starting at a given relative `position` and `velocity` at universal time `ut`\n",
            "parameters": [
              {
                "name": "position",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "Vec3"
                },
                "hasDefault": false
              },
              {
                "name": "velocity",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "Vec3"
                },
                "hasDefault": false
              },
              {
                "name": "ut",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            }
          },
          "global_create_orbit": {
            "name": "global_create_orbit",
            "description": "Create a new orbit around this body starting at a given a coordinate independent `velocity` at universal time `ut`\n",
            "parameters": [
              {
                "name": "velocity",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "GlobalVelocity"
                },
                "hasDefault": false
              },
              {
                "name": "ut",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            }
          }
        }
      },
      "GeoCoordinates": {
        "name": "GeoCoordinates",
        "description": null,
        "fields": {
          "body": {
            "name": "body",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Body"
            }
          },
          "latitude": {
            "name": "latitude",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "longitude": {
            "name": "longitude",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "surface_normal": {
            "name": "surface_normal",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "global_surface_normal": {
            "name": "global_surface_normal",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            }
          },
          "terrain_height": {
            "name": "terrain_height",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          }
        },
        "methods": {
          "altitude_position": {
            "name": "altitude_position",
            "description": null,
            "parameters": [
              {
                "name": "altitude",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "global_altitude_position": {
            "name": "global_altitude_position",
            "description": null,
            "parameters": [
              {
                "name": "altitude",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalPosition"
            }
          }
        }
      },
      "Orbit": {
        "name": "Orbit",
        "description": "Represents an in-game orbit.\n",
        "fields": {
          "reference_body": {
            "name": "reference_body",
            "description": "The celestial body the orbit is referenced on.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Body"
            }
          },
          "start_ut": {
            "name": "start_ut",
            "description": "Universal time of the start of the orbit, in case it is an orbit-patch\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "end_ut": {
            "name": "end_ut",
            "description": "Universal time of the start of the orbit, in case it is an orbit-patch\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "apoapsis": {
            "name": "apoapsis",
            "description": "Apoapsis of the orbit above sealevel of the `reference_body`. Is not defined for a hyperbolic orbit\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "",
              "name": "Option<float>"
            }
          },
          "periapsis": {
            "name": "periapsis",
            "description": "Periapsis of the orbit above sealevel of the `reference_body`\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "apoapsis_radius": {
            "name": "apoapsis_radius",
            "description": "Radius of apoapsis of the orbit (i.e. from the center of the `reference_body'). Is not defined for a hyperbolic orbit\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "",
              "name": "Option<float>"
            }
          },
          "periapsis_radius": {
            "name": "periapsis_radius",
            "description": "Radius of periapsis of the orbit (i.e. from the center of the `reference_body')\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "semi_major_axis": {
            "name": "semi_major_axis",
            "description": "Semi major axis of the orbit.\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "inclination": {
            "name": "inclination",
            "description": "Inclination of the orbit in degree.\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "eccentricity": {
            "name": "eccentricity",
            "description": "Eccentricity of the orbit.\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "LAN": {
            "name": "LAN",
            "description": "Longitude of ascending node of the orbit in degree\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "epoch": {
            "name": "epoch",
            "description": "Orbit epoch.\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "argument_of_periapsis": {
            "name": "argument_of_periapsis",
            "description": "Argument of periapsis of the orbit.\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "mean_anomaly_at_epoch": {
            "name": "mean_anomaly_at_epoch",
            "description": "Mean anomaly of the orbit at `epoch`\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "mean_motion": {
            "name": "mean_motion",
            "description": "Mean motion of the orbit.\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "period": {
            "name": "period",
            "description": "Orbital period.\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "reference_frame": {
            "name": "reference_frame",
            "description": "Internal reference frame of the orbit.\nThis might be useful to compare numbers.\nNote: All relative vectors are in the celestial frame of the `reference_body` which might be different!\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "TransformFrame"
            }
          },
          "orbit_normal": {
            "name": "orbit_normal",
            "description": "Normal vector perpendicular to orbital plane.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "relative_ascending_node": {
            "name": "relative_ascending_node",
            "description": "Get the relative position of the ascending node.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "relative_eccentricity_vector": {
            "name": "relative_eccentricity_vector",
            "description": "Get the relative eccentricity vector.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          }
        },
        "methods": {
          "orbital_velocity": {
            "name": "orbital_velocity",
            "description": "Get the relative orbital velocity at a given universal time `ut`\n",
            "parameters": [
              {
                "name": "ut",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "global_position": {
            "name": "global_position",
            "description": "Get the coordinate independent position at a given universal time `ut`\n",
            "parameters": [
              {
                "name": "ut",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalPosition"
            }
          },
          "global_velocity": {
            "name": "global_velocity",
            "description": "Get the coordinate independent velocity at a given universal time `ut`\n",
            "parameters": [
              {
                "name": "ut",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVelocity"
            }
          },
          "relative_position": {
            "name": "relative_position",
            "description": "Get relative position at a given universal time `ut`\n",
            "parameters": [
              {
                "name": "ut",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "relative_position_for_true_anomaly": {
            "name": "relative_position_for_true_anomaly",
            "description": "Get relative position for a given `trueAnomaly`\n",
            "parameters": [
              {
                "name": "trueAnomaly",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "global_position_for_true_anomaly": {
            "name": "global_position_for_true_anomaly",
            "description": "Get the coordinate independent position for a given `trueAnomaly`\n",
            "parameters": [
              {
                "name": "trueAnomaly",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalPosition"
            }
          },
          "prograde": {
            "name": "prograde",
            "description": "The relative prograde vector at a given universal time `ut`\n",
            "parameters": [
              {
                "name": "ut",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "normal_plus": {
            "name": "normal_plus",
            "description": "The relative normal-plus vector at a given universal time `ut`\n",
            "parameters": [
              {
                "name": "ut",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "radial_plus": {
            "name": "radial_plus",
            "description": "The relative radial-plus vector at a given universal time `ut`\n",
            "parameters": [
              {
                "name": "ut",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "up": {
            "name": "up",
            "description": "Relative up vector of the orbit at a given universal time `ut`\n",
            "parameters": [
              {
                "name": "ut",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "radius": {
            "name": "radius",
            "description": "Get the orbital radius (distance from center of body) at a given universal time `ut`\n",
            "parameters": [
              {
                "name": "ut",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "horizontal": {
            "name": "horizontal",
            "description": "Relative horizontal vector at a given universal time `ut`\n",
            "parameters": [
              {
                "name": "ut",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "perturbed_orbit": {
            "name": "perturbed_orbit",
            "description": "Returns a new Orbit object that represents the result of applying a given relative `deltaV` to o at `ut`.\n",
            "parameters": [
              {
                "name": "ut",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "dV",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "Vec3"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            }
          },
          "mean_anomaly_at_ut": {
            "name": "mean_anomaly_at_ut",
            "description": "The mean anomaly of the orbit.\nFor elliptical orbits, the value return is always between 0 and 2pi.\nFor hyperbolic orbits, the value can be any number.\n",
            "parameters": [
              {
                "name": "ut",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "ut_at_mean_anomaly": {
            "name": "ut_at_mean_anomaly",
            "description": "The next time at which the orbiting object will reach the given mean anomaly.\nFor elliptical orbits, this will be a time between UT and UT + o.period.\nFor hyperbolic orbits, this can be any time, including a time in the past, if the given mean anomaly occurred in the past\n",
            "parameters": [
              {
                "name": "meanAnomaly",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "ut",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "get_mean_anomaly_at_eccentric_anomaly": {
            "name": "get_mean_anomaly_at_eccentric_anomaly",
            "description": "Converts an eccentric anomaly into a mean anomaly.\nFor an elliptical orbit, the returned value is between 0 and 2pi.\nFor a hyperbolic orbit, the returned value is any number.\n",
            "parameters": [
              {
                "name": "ecc",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "get_eccentric_anomaly_at_true_anomaly": {
            "name": "get_eccentric_anomaly_at_true_anomaly",
            "description": "Converts a true anomaly into an eccentric anomaly.\nFor elliptical orbits this returns a value between 0 and 2pi.\nFor hyperbolic orbits the returned value can be any number.\n",
            "parameters": [
              {
                "name": "trueAnomaly",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "time_of_true_anomaly": {
            "name": "time_of_true_anomaly",
            "description": "Next time of a certain true anomaly after a given universal time `ut`.\nIf `ut` is omitted the current time will be used\n",
            "parameters": [
              {
                "name": "trueAnomaly",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "maybeUt",
                "type": {
                  "kind": "Standard",
                  "module": "",
                  "name": "Option<float>"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "next_periapsis_time": {
            "name": "next_periapsis_time",
            "description": "The next time at which the orbiting object will be at periapsis after a given universal time `ut`.\nIf `ut` is omitted the current time will be used.\nFor elliptical orbits, this will be between `ut` and `ut` + Period.\nFor hyperbolic orbits, this can be any time, including a time in the past, if the periapsis is in the past.\n",
            "parameters": [
              {
                "name": "ut",
                "type": {
                  "kind": "Standard",
                  "module": "",
                  "name": "Option<float>"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "next_apoapsis_time": {
            "name": "next_apoapsis_time",
            "description": "Returns the next time at which the orbiting object will be at apoapsis after a given universal time `ut`.\nIf `ut` is omitted the current time will be used.\nFor elliptical orbits, this will be between `ut` and `ut` + Period.\nFor hyperbolic orbits, this is undefined.\n",
            "parameters": [
              {
                "name": "ut",
                "type": {
                  "kind": "Standard",
                  "module": "",
                  "name": "Option<float>"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "",
              "name": "Option<float>"
            }
          },
          "true_anomaly_at_radius": {
            "name": "true_anomaly_at_radius",
            "description": "Get the true anomaly of a radius.\nIf the radius is below the periapsis the true anomaly of the periapsis will be returned.\nIf it is above the apoapsis the true anomaly of the apoapsis is returned.\nThe returned value is always between 0 and 2pi.\n",
            "parameters": [
              {
                "name": "radius",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "next_time_of_radius": {
            "name": "next_time_of_radius",
            "description": "Finds the next time at which the orbiting object will achieve a given `radius` from center of the body\nafter a given universal time `ut`.\nThis will be undefined if the specified `radius` is impossible for this orbit, otherwise:\nFor elliptical orbits this will be a time between `ut` and `ut` + period.\nFor hyperbolic orbits this can be any time. If the given radius will be achieved\nin the future then the next time at which that radius will be achieved will be returned.\nIf the given radius was only achieved in the past, then there are no guarantees\nabout which of the two times in the past will be returned.\n",
            "parameters": [
              {
                "name": "ut",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "radius",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "",
              "name": "Option<float>"
            }
          },
          "synodic_period": {
            "name": "synodic_period",
            "description": "Computes the period of the phase angle between orbiting objects of this orbit and and `other` orbit.\nFor noncircular orbits the time variation of the phase angle is only quasiperiodic\nand for high eccentricities and/or large relative inclinations, the relative motion is\nnot really periodic at all.\n",
            "parameters": [
              {
                "name": "other",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::orbit",
                  "name": "Orbit"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "true_anomaly_from_vector": {
            "name": "true_anomaly_from_vector",
            "description": "Converts a relative direction, into a true anomaly.\nThe vector is projected into the orbital plane and then the true anomaly is\ncomputed as the angle this vector makes with the vector pointing to the periapsis.\nThe returned value is always between 0 and 2pi.\n",
            "parameters": [
              {
                "name": "vec",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "Vec3"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "ascending_node_true_anomaly": {
            "name": "ascending_node_true_anomaly",
            "description": "Gives the true anomaly (in a's orbit) at which a crosses its ascending node with b's orbit.\nThe returned value is always between 0 and 360.\n",
            "parameters": [
              {
                "name": "b",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::orbit",
                  "name": "Orbit"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "descending_node_true_anomaly": {
            "name": "descending_node_true_anomaly",
            "description": "Gives the true anomaly (in a's orbit) at which a crosses its descending node with b's orbit.\nThe returned value is always between 0 and 360.\n",
            "parameters": [
              {
                "name": "b",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::orbit",
                  "name": "Orbit"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "time_of_ascending_node": {
            "name": "time_of_ascending_node",
            "description": "Returns the next time at which a will cross its ascending node with b.\nFor elliptical orbits this is a time between UT and UT + a.period.\nFor hyperbolic orbits this can be any time, including a time in the past if\nthe ascending node is in the past.\nNOTE: this function will throw an ArgumentException if a is a hyperbolic orbit and the ascending node\noccurs at a true anomaly that a does not actually ever attain.\nIf `ut` is omitted the current time will be used.\n",
            "parameters": [
              {
                "name": "b",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::orbit",
                  "name": "Orbit"
                },
                "hasDefault": false
              },
              {
                "name": "maybeUt",
                "type": {
                  "kind": "Standard",
                  "module": "",
                  "name": "Option<float>"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "time_of_descending_node": {
            "name": "time_of_descending_node",
            "description": "Returns the next time at which a will cross its descending node with b.\nFor elliptical orbits this is a time between UT and UT + a.period.\nFor hyperbolic orbits this can be any time, including a time in the past if\nthe descending node is in the past.\nNOTE: this function will throw an ArgumentException if a is a hyperbolic orbit and the descending node\noccurs at a true anomaly that a does not actually ever attain.\nIf `ut` is omitted the current time will be used\n",
            "parameters": [
              {
                "name": "b",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::orbit",
                  "name": "Orbit"
                },
                "hasDefault": false
              },
              {
                "name": "maybeUt",
                "type": {
                  "kind": "Standard",
                  "module": "",
                  "name": "Option<float>"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "to_string": {
            "name": "to_string",
            "description": "Convert orbital parameters to string.\n",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "to_fixed": {
            "name": "to_fixed",
            "description": "Convert orbital parameter to string using specified number of `decimals`\n",
            "parameters": [
              {
                "name": "decimals",
                "type": {
                  "kind": "Builtin",
                  "name": "int"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "string"
            }
          }
        }
      }
    },
    "constants": {},
    "functions": {
      "find_body": {
        "name": "find_body",
        "description": "Find a body by name.\n",
        "parameters": [
          {
            "name": "name",
            "type": {
              "kind": "Builtin",
              "name": "string"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "Result<ksp::orbit",
          "name": "Body, string>"
        }
      },
      "galactic_origin": {
        "name": "galactic_origin",
        "description": "Get the galactic celestial frame.\n",
        "parameters": [],
        "returnType": {
          "kind": "Standard",
          "module": "ksp::math",
          "name": "TransformFrame"
        }
      }
    }
  },
  "ksp::resource": {
    "name": "ksp::resource",
    "description": "Collection of types and functions to get information and manipulate in-game resources.\n",
    "types": {
      "FlowDirection": {
        "name": "FlowDirection",
        "description": "Resource flow direction",
        "fields": {},
        "methods": {
          "to_string": {
            "name": "to_string",
            "description": "String representation of the number",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "string"
            }
          }
        }
      },
      "FlowDirectionConstants": {
        "name": "FlowDirectionConstants",
        "description": "",
        "fields": {
          "FLOW_INBOUND": {
            "name": "FLOW_INBOUND",
            "description": "Inbound resource request (i.e demand resource from other parts)",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::resource",
              "name": "FlowDirection"
            }
          },
          "FLOW_OUTBOUND": {
            "name": "FLOW_OUTBOUND",
            "description": "Outbound resource request (i.e. provide resource to other parts)",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::resource",
              "name": "FlowDirection"
            }
          }
        },
        "methods": {
          "from_string": {
            "name": "from_string",
            "description": "Parse from string",
            "parameters": [
              {
                "name": "value",
                "type": {
                  "kind": "Builtin",
                  "name": "string"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "Option<ksp::resource",
              "name": "FlowDirection>"
            }
          }
        }
      },
      "ResourceContainer": {
        "name": "ResourceContainer",
        "description": null,
        "fields": {
          "list": {
            "name": "list",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::resource",
              "name": "ResourceData[]"
            }
          }
        },
        "methods": {
          "dump_all": {
            "name": "dump_all",
            "description": null,
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          }
        }
      },
      "ResourceData": {
        "name": "ResourceData",
        "description": null,
        "fields": {
          "resource": {
            "name": "resource",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::resource",
              "name": "ResourceDefinition"
            }
          },
          "capacity_units": {
            "name": "capacity_units",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "stored_units": {
            "name": "stored_units",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          }
        },
        "methods": {}
      },
      "ResourceDefinition": {
        "name": "ResourceDefinition",
        "description": "Represents an in-game resource.\n",
        "fields": {
          "id": {
            "name": "id",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "int"
            }
          },
          "name": {
            "name": "name",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "display_name": {
            "name": "display_name",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "display_abbreviation": {
            "name": "display_abbreviation",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "mass_per_unit": {
            "name": "mass_per_unit",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "volume_per_unit": {
            "name": "volume_per_unit",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "mass_per_volume": {
            "name": "mass_per_volume",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          }
        },
        "methods": {}
      },
      "ResourceTransfer": {
        "name": "ResourceTransfer",
        "description": "Represents a resource transfer\n",
        "fields": {
          "entries": {
            "name": "entries",
            "description": "Get currently registers resource transfer entries.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::resource",
              "name": "ResourceTransferEntry[]"
            }
          },
          "is_running": {
            "name": "is_running",
            "description": "Check if a resource transfer is in progress.\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          }
        },
        "methods": {
          "add_container": {
            "name": "add_container",
            "description": null,
            "parameters": [
              {
                "name": "flowDirection",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::resource",
                  "name": "FlowDirection"
                },
                "hasDefault": false
              },
              {
                "name": "resourceContainer",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::resource",
                  "name": "ResourceContainer"
                },
                "hasDefault": false
              },
              {
                "name": "relativeAmount",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "add_resource": {
            "name": "add_resource",
            "description": null,
            "parameters": [
              {
                "name": "flowDirection",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::resource",
                  "name": "FlowDirection"
                },
                "hasDefault": false
              },
              {
                "name": "resource",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::resource",
                  "name": "ResourceData"
                },
                "hasDefault": false
              },
              {
                "name": "maxUnits",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "start": {
            "name": "start",
            "description": "Start the resource transfer.\n",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "stop": {
            "name": "stop",
            "description": "Stop the resource transfer.\n",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "clear": {
            "name": "clear",
            "description": "Cleanup all registered resource transfer entries.\nThis will implicitly stop the resource transfer if it is still running.\n",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          }
        }
      },
      "ResourceTransferEntry": {
        "name": "ResourceTransferEntry",
        "description": null,
        "fields": {
          "flow_direction": {
            "name": "flow_direction",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::resource",
              "name": "FlowDirection"
            }
          },
          "resource_container": {
            "name": "resource_container",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::resource",
              "name": "ResourceContainer"
            }
          }
        },
        "methods": {}
      }
    },
    "constants": {
      "FlowDirection": {
        "name": "FlowDirection",
        "description": "Resource flow direction",
        "type": {
          "kind": "Standard",
          "module": "ksp::resource",
          "name": "FlowDirectionConstants"
        }
      }
    },
    "functions": {
      "create_resource_transfer": {
        "name": "create_resource_transfer",
        "description": null,
        "parameters": [],
        "returnType": {
          "kind": "Standard",
          "module": "ksp::resource",
          "name": "ResourceTransfer"
        }
      }
    }
  },
  "ksp::telemetry": {
    "name": "ksp::telemetry",
    "description": null,
    "types": {
      "TimeSeries": {
        "name": "TimeSeries",
        "description": null,
        "fields": {
          "name": {
            "name": "name",
            "description": "Name of the time series. Has to be unique.\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "start_ut": {
            "name": "start_ut",
            "description": "Start time of the time series.\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "end_ut": {
            "name": "end_ut",
            "description": "End time of the time series. This will increase when data is added.\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "resolution": {
            "name": "resolution",
            "description": "\nCurrent time resolution of the time series.\nThis will increase the longer `end_ut - start_ut` gets to prevent accumulation of too much data.\n\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          }
        },
        "methods": {
          "add_data": {
            "name": "add_data",
            "description": "Add a data `value` at time `ut`.\n",
            "parameters": [
              {
                "name": "ut",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "value",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "bool"
            }
          }
        }
      }
    },
    "constants": {},
    "functions": {
      "add_time_series": {
        "name": "add_time_series",
        "description": "\nCreate a new time series starting at `startUt` with an initial resultion `initialResolution`.\nIf a time series of the `name` already exists it will be replace by the new one.\n\n",
        "parameters": [
          {
            "name": "name",
            "type": {
              "kind": "Builtin",
              "name": "string"
            },
            "hasDefault": false
          },
          {
            "name": "startUt",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "initialResolution",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "ksp::telemetry",
          "name": "TimeSeries"
        }
      },
      "get_time_series": {
        "name": "get_time_series",
        "description": "Get a time series by name. Will be undefined if there it does not exists\n",
        "parameters": [
          {
            "name": "name",
            "type": {
              "kind": "Builtin",
              "name": "string"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "Option<ksp::telemetry",
          "name": "TimeSeries>"
        }
      },
      "remove_time_series": {
        "name": "remove_time_series",
        "description": "Remove a time series by name.\n",
        "parameters": [
          {
            "name": "name",
            "type": {
              "kind": "Builtin",
              "name": "string"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "bool"
        }
      },
      "remove_all_time_series": {
        "name": "remove_all_time_series",
        "description": "Remove all time series.\n",
        "parameters": [],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "save_time_series": {
        "name": "save_time_series",
        "description": "Store the data of all time series to a file.\n",
        "parameters": [
          {
            "name": "filename",
            "type": {
              "kind": "Builtin",
              "name": "string"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      }
    }
  },
  "ksp::testing": {
    "name": "ksp::testing",
    "description": null,
    "types": {},
    "constants": {
      "IDENTITY_COORDINATE_SYSTEM": {
        "name": "IDENTITY_COORDINATE_SYSTEM",
        "description": null,
        "type": {
          "kind": "Standard",
          "module": "ksp::math",
          "name": "TransformFrame"
        }
      }
    },
    "functions": {
      "assert_vec2": {
        "name": "assert_vec2",
        "description": null,
        "parameters": [
          {
            "name": "expected",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec2"
            },
            "hasDefault": false
          },
          {
            "name": "actual",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec2"
            },
            "hasDefault": false
          },
          {
            "name": "delta",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": true
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "assert_vec3": {
        "name": "assert_vec3",
        "description": null,
        "parameters": [
          {
            "name": "expected",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            },
            "hasDefault": false
          },
          {
            "name": "actual",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            },
            "hasDefault": false
          },
          {
            "name": "delta",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": true
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "assert_true": {
        "name": "assert_true",
        "description": "Assert that `actual` is true (Test only)\n",
        "parameters": [
          {
            "name": "actual",
            "type": {
              "kind": "Builtin",
              "name": "bool"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "assert_false": {
        "name": "assert_false",
        "description": "Assert that `actual` is false (Test only)\n",
        "parameters": [
          {
            "name": "actual",
            "type": {
              "kind": "Builtin",
              "name": "bool"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "assert_string": {
        "name": "assert_string",
        "description": "Assert that `actual` string is equal to `expected` (Test only)\n",
        "parameters": [
          {
            "name": "expected",
            "type": {
              "kind": "Builtin",
              "name": "string"
            },
            "hasDefault": false
          },
          {
            "name": "actual",
            "type": {
              "kind": "Builtin",
              "name": "string"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "assert_int": {
        "name": "assert_int",
        "description": "Assert that `actual` integer is equal to `expected` (Test only)\n",
        "parameters": [
          {
            "name": "expected",
            "type": {
              "kind": "Builtin",
              "name": "int"
            },
            "hasDefault": false
          },
          {
            "name": "actual",
            "type": {
              "kind": "Builtin",
              "name": "int"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "assert_float": {
        "name": "assert_float",
        "description": "Assert that `actual` float is almost equal to `expected` with an absolute tolerance of `delta` (Test only)\n",
        "parameters": [
          {
            "name": "expected",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "actual",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "delta",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": true
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "assert_some": {
        "name": "assert_some",
        "description": null,
        "parameters": [
          {
            "name": "expected",
            "type": {
              "kind": "Generic",
              "name": "T"
            },
            "hasDefault": false
          },
          {
            "name": "actual",
            "type": {
              "kind": "Standard",
              "module": "",
              "name": "Option<T>"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "assert_none": {
        "name": "assert_none",
        "description": null,
        "parameters": [
          {
            "name": "actual",
            "type": {
              "kind": "Standard",
              "module": "",
              "name": "Option<T>"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "fail_test": {
        "name": "fail_test",
        "description": "Fail the test case with a `message` (Test only).\n",
        "parameters": [
          {
            "name": "message",
            "type": {
              "kind": "Builtin",
              "name": "string"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "assert_yield": {
        "name": "assert_yield",
        "description": "Assert that test case has yielded `expected` number of times already (Async test only)\n",
        "parameters": [
          {
            "name": "expected",
            "type": {
              "kind": "Builtin",
              "name": "int"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "yield": {
        "name": "yield",
        "description": "Yield the test case (Async test only)\n",
        "parameters": [],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "test_sleep": {
        "name": "test_sleep",
        "description": "Suspend execution for `millis`\n",
        "parameters": [
          {
            "name": "millis",
            "type": {
              "kind": "Builtin",
              "name": "int"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      }
    }
  },
  "ksp::vessel": {
    "name": "ksp::vessel",
    "description": "Collection of types and functions to get information and control in-game vessels.\n",
    "types": {
      "AutopilotMode": {
        "name": "AutopilotMode",
        "description": "Vessel autopilot (SAS) mode",
        "fields": {},
        "methods": {
          "to_string": {
            "name": "to_string",
            "description": "String representation of the number",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "string"
            }
          }
        }
      },
      "AutopilotModeConstants": {
        "name": "AutopilotModeConstants",
        "description": "",
        "fields": {
          "StabilityAssist": {
            "name": "StabilityAssist",
            "description": "Stability assist mode. The autopilot tries to stop the rotation of the vessel. ",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "AutopilotMode"
            }
          },
          "Prograde": {
            "name": "Prograde",
            "description": "Align the vessel to the prograde vector of its orbit.",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "AutopilotMode"
            }
          },
          "Retrograde": {
            "name": "Retrograde",
            "description": "Align the vessel to the retrograde vector of its orbit.",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "AutopilotMode"
            }
          },
          "Normal": {
            "name": "Normal",
            "description": "Align the vessel to the normal vector of its orbit.",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "AutopilotMode"
            }
          },
          "Antinormal": {
            "name": "Antinormal",
            "description": "Align the vessel to the anti-normal vector of its orbit.",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "AutopilotMode"
            }
          },
          "RadialIn": {
            "name": "RadialIn",
            "description": "Align the vessel to the radial-in vector of its orbit.",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "AutopilotMode"
            }
          },
          "RadialOut": {
            "name": "RadialOut",
            "description": "Align the vessel to the radial-out vector of its orbit.",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "AutopilotMode"
            }
          },
          "Target": {
            "name": "Target",
            "description": "Align the vessel to the vector pointing to its target (if a target is set).",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "AutopilotMode"
            }
          },
          "AntiTarget": {
            "name": "AntiTarget",
            "description": "Align the vessel to the vector pointing away from its target (if a target is set).",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "AutopilotMode"
            }
          },
          "Maneuver": {
            "name": "Maneuver",
            "description": "Align the vessel to the burn vector of the next maneuver node (if a maneuver node exists).",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "AutopilotMode"
            }
          },
          "Navigation": {
            "name": "Navigation",
            "description": "Align the vessel to the `vessel.autopilot.target_orientation` vector.",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "AutopilotMode"
            }
          },
          "Autopilot": {
            "name": "Autopilot",
            "description": "Align the vessel to the `vessel.autopilot.target_orientation` vector. (probably no difference to AutopilotMode.Navigation)",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "AutopilotMode"
            }
          }
        },
        "methods": {
          "from_string": {
            "name": "from_string",
            "description": "Parse from string",
            "parameters": [
              {
                "name": "value",
                "type": {
                  "kind": "Builtin",
                  "name": "string"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "AutopilotMode>"
            }
          }
        }
      },
      "DeltaVSituation": {
        "name": "DeltaVSituation",
        "description": "Vessel situation for delta-v calculation",
        "fields": {},
        "methods": {
          "to_string": {
            "name": "to_string",
            "description": "String representation of the number",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "string"
            }
          }
        }
      },
      "DeltaVSituationConstants": {
        "name": "DeltaVSituationConstants",
        "description": "",
        "fields": {
          "SeaLevel": {
            "name": "SeaLevel",
            "description": "Calculate delta-v at sea level of the current main body.",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "DeltaVSituation"
            }
          },
          "Altitude": {
            "name": "Altitude",
            "description": "Calculate delta-v at the current altitude of the vessel.",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "DeltaVSituation"
            }
          },
          "Vaccum": {
            "name": "Vaccum",
            "description": "Calculate delta-v in vaccum.",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "DeltaVSituation"
            }
          }
        },
        "methods": {
          "from_string": {
            "name": "from_string",
            "description": "Parse from string",
            "parameters": [
              {
                "name": "value",
                "type": {
                  "kind": "Builtin",
                  "name": "string"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "DeltaVSituation>"
            }
          }
        }
      },
      "ParachuteDeployState": {
        "name": "ParachuteDeployState",
        "description": "Parachute deploy state",
        "fields": {},
        "methods": {
          "to_string": {
            "name": "to_string",
            "description": "String representation of the number",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "string"
            }
          }
        }
      },
      "ParachuteDeployStateConstants": {
        "name": "ParachuteDeployStateConstants",
        "description": "",
        "fields": {
          "STOWED": {
            "name": "STOWED",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "ParachuteDeployState"
            }
          },
          "ARMED": {
            "name": "ARMED",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "ParachuteDeployState"
            }
          },
          "SEMIDEPLOYED": {
            "name": "SEMIDEPLOYED",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "ParachuteDeployState"
            }
          },
          "DEPLOYED": {
            "name": "DEPLOYED",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "ParachuteDeployState"
            }
          },
          "CUT": {
            "name": "CUT",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "ParachuteDeployState"
            }
          }
        },
        "methods": {
          "from_string": {
            "name": "from_string",
            "description": "Parse from string",
            "parameters": [
              {
                "name": "value",
                "type": {
                  "kind": "Builtin",
                  "name": "string"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "ParachuteDeployState>"
            }
          }
        }
      },
      "ParachuteDeployMode": {
        "name": "ParachuteDeployMode",
        "description": "Parachute deploy mode",
        "fields": {},
        "methods": {
          "to_string": {
            "name": "to_string",
            "description": "String representation of the number",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "string"
            }
          }
        }
      },
      "ParachuteDeployModeConstants": {
        "name": "ParachuteDeployModeConstants",
        "description": "",
        "fields": {
          "SAFE": {
            "name": "SAFE",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "ParachuteDeployMode"
            }
          },
          "RISKY": {
            "name": "RISKY",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "ParachuteDeployMode"
            }
          },
          "IMMEDIATE": {
            "name": "IMMEDIATE",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "ParachuteDeployMode"
            }
          }
        },
        "methods": {
          "from_string": {
            "name": "from_string",
            "description": "Parse from string",
            "parameters": [
              {
                "name": "value",
                "type": {
                  "kind": "Builtin",
                  "name": "string"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "ParachuteDeployMode>"
            }
          }
        }
      },
      "ParachuteSafeStates": {
        "name": "ParachuteSafeStates",
        "description": "Parachute safe states",
        "fields": {},
        "methods": {
          "to_string": {
            "name": "to_string",
            "description": "String representation of the number",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "string"
            }
          }
        }
      },
      "ParachuteSafeStatesConstants": {
        "name": "ParachuteSafeStatesConstants",
        "description": "",
        "fields": {
          "SAFE": {
            "name": "SAFE",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "ParachuteSafeStates"
            }
          },
          "RISKY": {
            "name": "RISKY",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "ParachuteSafeStates"
            }
          },
          "UNSAFE": {
            "name": "UNSAFE",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "ParachuteSafeStates"
            }
          },
          "NONE": {
            "name": "NONE",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "ParachuteSafeStates"
            }
          }
        },
        "methods": {
          "from_string": {
            "name": "from_string",
            "description": "Parse from string",
            "parameters": [
              {
                "name": "value",
                "type": {
                  "kind": "Builtin",
                  "name": "string"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "ParachuteSafeStates>"
            }
          }
        }
      },
      "EngineType": {
        "name": "EngineType",
        "description": "Engine types",
        "fields": {},
        "methods": {
          "to_string": {
            "name": "to_string",
            "description": "String representation of the number",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "string"
            }
          }
        }
      },
      "EngineTypeConstants": {
        "name": "EngineTypeConstants",
        "description": "",
        "fields": {
          "Generic": {
            "name": "Generic",
            "description": "Generic engine type (not specified)",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "EngineType"
            }
          },
          "SolidBooster": {
            "name": "SolidBooster",
            "description": "Engine is a solid fuel booster",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "EngineType"
            }
          },
          "Methalox": {
            "name": "Methalox",
            "description": "Methan-oxigene rocket engine",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "EngineType"
            }
          },
          "Piston": {
            "name": "Piston",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "EngineType"
            }
          },
          "Turbine": {
            "name": "Turbine",
            "description": "Turbine engine",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "EngineType"
            }
          },
          "ScramJet": {
            "name": "ScramJet",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "EngineType"
            }
          },
          "Electric": {
            "name": "Electric",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "EngineType"
            }
          },
          "Nuclear": {
            "name": "Nuclear",
            "description": "Nuclear engine",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "EngineType"
            }
          },
          "MonoProp": {
            "name": "MonoProp",
            "description": "Mono-propellant engine",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "EngineType"
            }
          },
          "Helium3": {
            "name": "Helium3",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "EngineType"
            }
          },
          "MetallicHydrogen": {
            "name": "MetallicHydrogen",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "EngineType"
            }
          },
          "NuclearSaltwater": {
            "name": "NuclearSaltwater",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "EngineType"
            }
          },
          "Antimatter": {
            "name": "Antimatter",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "EngineType"
            }
          }
        },
        "methods": {
          "from_string": {
            "name": "from_string",
            "description": "Parse from string",
            "parameters": [
              {
                "name": "value",
                "type": {
                  "kind": "Builtin",
                  "name": "string"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "EngineType>"
            }
          }
        }
      },
      "VesselSituation": {
        "name": "VesselSituation",
        "description": "Vessel situation",
        "fields": {},
        "methods": {
          "to_string": {
            "name": "to_string",
            "description": "String representation of the number",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "string"
            }
          }
        }
      },
      "VesselSituationConstants": {
        "name": "VesselSituationConstants",
        "description": "",
        "fields": {
          "PreLaunch": {
            "name": "PreLaunch",
            "description": "Vessel is in pre-launch situation.",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "VesselSituation"
            }
          },
          "Landed": {
            "name": "Landed",
            "description": "Vessel has landed.",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "VesselSituation"
            }
          },
          "Splashed": {
            "name": "Splashed",
            "description": "Vessel has splashed in water.",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "VesselSituation"
            }
          },
          "Flying": {
            "name": "Flying",
            "description": "Vessel is flying.",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "VesselSituation"
            }
          },
          "SubOrbital": {
            "name": "SubOrbital",
            "description": "Vessel is on a sub-orbital trajectory.",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "VesselSituation"
            }
          },
          "Orbiting": {
            "name": "Orbiting",
            "description": "Vessel is orbiting its main body.",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "VesselSituation"
            }
          },
          "Escaping": {
            "name": "Escaping",
            "description": "Vessel is on an escape trajectory.",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "VesselSituation"
            }
          },
          "Unknown": {
            "name": "Unknown",
            "description": "Vessel situation is unknown.",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "VesselSituation"
            }
          }
        },
        "methods": {
          "from_string": {
            "name": "from_string",
            "description": "Parse from string",
            "parameters": [
              {
                "name": "value",
                "type": {
                  "kind": "Builtin",
                  "name": "string"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "VesselSituation>"
            }
          }
        }
      },
      "VesselControlState": {
        "name": "VesselControlState",
        "description": "Vessel control state",
        "fields": {},
        "methods": {
          "to_string": {
            "name": "to_string",
            "description": "String representation of the number",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "string"
            }
          }
        }
      },
      "VesselControlStateConstants": {
        "name": "VesselControlStateConstants",
        "description": "",
        "fields": {
          "NoControl": {
            "name": "NoControl",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "VesselControlState"
            }
          },
          "NoCommNet": {
            "name": "NoCommNet",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "VesselControlState"
            }
          },
          "FullControlHibernation": {
            "name": "FullControlHibernation",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "VesselControlState"
            }
          },
          "FullControl": {
            "name": "FullControl",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "VesselControlState"
            }
          }
        },
        "methods": {
          "from_string": {
            "name": "from_string",
            "description": "Parse from string",
            "parameters": [
              {
                "name": "value",
                "type": {
                  "kind": "Builtin",
                  "name": "string"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "VesselControlState>"
            }
          }
        }
      },
      "DockingState": {
        "name": "DockingState",
        "description": "Current state of a docking node",
        "fields": {},
        "methods": {
          "to_string": {
            "name": "to_string",
            "description": "String representation of the number",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "string"
            }
          }
        }
      },
      "DockingStateConstants": {
        "name": "DockingStateConstants",
        "description": "",
        "fields": {
          "None": {
            "name": "None",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "DockingState"
            }
          },
          "Ready": {
            "name": "Ready",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "DockingState"
            }
          },
          "Acquire_Dockee": {
            "name": "Acquire_Dockee",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "DockingState"
            }
          },
          "Acquire_Docker": {
            "name": "Acquire_Docker",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "DockingState"
            }
          },
          "Docked": {
            "name": "Docked",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "DockingState"
            }
          },
          "Disengaged": {
            "name": "Disengaged",
            "description": "",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "DockingState"
            }
          }
        },
        "methods": {
          "from_string": {
            "name": "from_string",
            "description": "Parse from string",
            "parameters": [
              {
                "name": "value",
                "type": {
                  "kind": "Builtin",
                  "name": "string"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "DockingState>"
            }
          }
        }
      },
      "FlightCtrlState": {
        "name": "FlightCtrlState",
        "description": "Current state of the (pilots) flight controls.",
        "fields": {
          "main_throttle": {
            "name": "main_throttle",
            "description": "Setting for the main throttle (0 - 1)",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "x": {
            "name": "x",
            "description": "Setting for x-translation (-1 - 1)",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "y": {
            "name": "y",
            "description": "Setting for y-translation (-1 - 1)",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "z": {
            "name": "z",
            "description": "Setting for z-translation (-1 - 1)",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "pitch": {
            "name": "pitch",
            "description": "Setting for pitch rotation (-1 - 1)",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "yaw": {
            "name": "yaw",
            "description": "Setting for yaw rotation (-1 - 1)",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "roll": {
            "name": "roll",
            "description": "Setting for roll rotation (-1 - 1)",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "pitch_trim": {
            "name": "pitch_trim",
            "description": "Current trim value for pitch",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "yaw_trim": {
            "name": "yaw_trim",
            "description": "Current trim value for yaw",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "roll_trim": {
            "name": "roll_trim",
            "description": "Current trim value for roll",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "wheel_throttle": {
            "name": "wheel_throttle",
            "description": "Setting for wheel throttle (0 - 1, applied to Rovers)",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "wheel_steer": {
            "name": "wheel_steer",
            "description": "Setting for wheel steering (-1 - 1, applied to Rovers)",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "wheel_throttle_trim": {
            "name": "wheel_throttle_trim",
            "description": "Current trim value for wheel throttle",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "wheel_steer_trim": {
            "name": "wheel_steer_trim",
            "description": "Current trim value for wheel steering",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "kill_rot": {
            "name": "kill_rot",
            "description": "Kill rotation",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "gear_up": {
            "name": "gear_up",
            "description": "Gear up",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "gear_down": {
            "name": "gear_down",
            "description": "Gear down",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "breaks": {
            "name": "breaks",
            "description": "Brakes",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "stage": {
            "name": "stage",
            "description": "Stage",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          }
        },
        "methods": {}
      },
      "ActionGroups": {
        "name": "ActionGroups",
        "description": null,
        "fields": {
          "sas": {
            "name": "sas",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "rcs": {
            "name": "rcs",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "brakes": {
            "name": "brakes",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "solar_panels": {
            "name": "solar_panels",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "radiator_panels": {
            "name": "radiator_panels",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "gear": {
            "name": "gear",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "light": {
            "name": "light",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "abort": {
            "name": "abort",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "custom1": {
            "name": "custom1",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "custom2": {
            "name": "custom2",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "custom3": {
            "name": "custom3",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "custom4": {
            "name": "custom4",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "custom5": {
            "name": "custom5",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "custom6": {
            "name": "custom6",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "custom7": {
            "name": "custom7",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "custom8": {
            "name": "custom8",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "custom9": {
            "name": "custom9",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "custom10": {
            "name": "custom10",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          }
        },
        "methods": {}
      },
      "Autopilot": {
        "name": "Autopilot",
        "description": null,
        "fields": {
          "enabled": {
            "name": "enabled",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "mode": {
            "name": "mode",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "AutopilotMode"
            }
          },
          "target_orientation": {
            "name": "target_orientation",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "global_target_orientation": {
            "name": "global_target_orientation",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            }
          },
          "lock_direction": {
            "name": "lock_direction",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Direction"
            }
          },
          "global_lock_direction": {
            "name": "global_lock_direction",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalDirection"
            }
          }
        },
        "methods": {}
      },
      "EngineDeltaV": {
        "name": "EngineDeltaV",
        "description": null,
        "fields": {
          "start_burn_stage": {
            "name": "start_burn_stage",
            "description": "Number of the stage when engine is supposed to start\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "int"
            }
          },
          "engine_module": {
            "name": "engine_module",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "ModuleEngine"
            }
          }
        },
        "methods": {
          "get_ISP": {
            "name": "get_ISP",
            "description": "Estimated ISP of the engine in a given `situation`\n",
            "parameters": [
              {
                "name": "situation",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::vessel",
                  "name": "DeltaVSituation"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "get_thrust": {
            "name": "get_thrust",
            "description": "Estimated thrust of the engine in a given `situation`\n",
            "parameters": [
              {
                "name": "situation",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::vessel",
                  "name": "DeltaVSituation"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "get_thrust_vector": {
            "name": "get_thrust_vector",
            "description": "Estimated thrust vector of the engine in a given `situation`\n",
            "parameters": [
              {
                "name": "situation",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::vessel",
                  "name": "DeltaVSituation"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          }
        }
      },
      "StageDeltaV": {
        "name": "StageDeltaV",
        "description": null,
        "fields": {
          "stage": {
            "name": "stage",
            "description": "The stage number.\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "int"
            }
          },
          "burn_time": {
            "name": "burn_time",
            "description": "Estimated burn time of the stage.\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "start_mass": {
            "name": "start_mass",
            "description": "Start mass of the stage.\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "end_mass": {
            "name": "end_mass",
            "description": "End mass of the stage.\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "fuel_mass": {
            "name": "fuel_mass",
            "description": "Mass of the fuel in the stage.\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "dry_mass": {
            "name": "dry_mass",
            "description": "Dry mass of the stage.\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "engines": {
            "name": "engines",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "EngineDeltaV[]"
            }
          },
          "active_engines": {
            "name": "active_engines",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "EngineDeltaV[]"
            }
          }
        },
        "methods": {
          "get_deltav": {
            "name": "get_deltav",
            "description": "Estimated delta-v of the stage in a given `situation`\n",
            "parameters": [
              {
                "name": "situation",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::vessel",
                  "name": "DeltaVSituation"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "get_ISP": {
            "name": "get_ISP",
            "description": "Estimated ISP of the stage in a given `situation`\n",
            "parameters": [
              {
                "name": "situation",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::vessel",
                  "name": "DeltaVSituation"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "get_TWR": {
            "name": "get_TWR",
            "description": "Estimated TWR of the stage in a given `situation`\n",
            "parameters": [
              {
                "name": "situation",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::vessel",
                  "name": "DeltaVSituation"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "get_thrust": {
            "name": "get_thrust",
            "description": "Estimated thrust of the stage in a given `situation`\n",
            "parameters": [
              {
                "name": "situation",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::vessel",
                  "name": "DeltaVSituation"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          }
        }
      },
      "EngineMode": {
        "name": "EngineMode",
        "description": null,
        "fields": {
          "name": {
            "name": "name",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "allow_restart": {
            "name": "allow_restart",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "allow_shutdown": {
            "name": "allow_shutdown",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "throttle_locked": {
            "name": "throttle_locked",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "min_thrust": {
            "name": "min_thrust",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "max_thrust": {
            "name": "max_thrust",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "engine_type": {
            "name": "engine_type",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "EngineType"
            }
          }
        },
        "methods": {}
      },
      "Maneuver": {
        "name": "Maneuver",
        "description": null,
        "fields": {
          "nodes": {
            "name": "nodes",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "ManeuverNode[]"
            }
          }
        },
        "methods": {
          "next_node": {
            "name": "next_node",
            "description": null,
            "parameters": [],
            "returnType": {
              "kind": "Standard",
              "module": "Result<ksp::vessel",
              "name": "ManeuverNode, string>"
            }
          },
          "add": {
            "name": "add",
            "description": null,
            "parameters": [
              {
                "name": "ut",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "radialOut",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "normal",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "prograde",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "Result<ksp::vessel",
              "name": "ManeuverNode, string>"
            }
          },
          "add_burn_vector": {
            "name": "add_burn_vector",
            "description": null,
            "parameters": [
              {
                "name": "ut",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "burnVector",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "Vec3"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "Result<ksp::vessel",
              "name": "ManeuverNode, string>"
            }
          }
        }
      },
      "ManeuverNode": {
        "name": "ManeuverNode",
        "description": null,
        "fields": {
          "time": {
            "name": "time",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "prograde": {
            "name": "prograde",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "normal": {
            "name": "normal",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "radial_out": {
            "name": "radial_out",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "ETA": {
            "name": "ETA",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "orbit_patch": {
            "name": "orbit_patch",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            }
          },
          "burn_vector": {
            "name": "burn_vector",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "global_burn_vector": {
            "name": "global_burn_vector",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVelocity"
            }
          },
          "burn_duration": {
            "name": "burn_duration",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "expected_orbit": {
            "name": "expected_orbit",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            }
          }
        },
        "methods": {
          "remove": {
            "name": "remove",
            "description": null,
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          }
        }
      },
      "ModuleAirIntake": {
        "name": "ModuleAirIntake",
        "description": null,
        "fields": {
          "resource_units": {
            "name": "resource_units",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "enabled": {
            "name": "enabled",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          }
        },
        "methods": {}
      },
      "ModuleDecoupler": {
        "name": "ModuleDecoupler",
        "description": null,
        "fields": {
          "part_name": {
            "name": "part_name",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "ejection_impulse": {
            "name": "ejection_impulse",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "is_decoupled": {
            "name": "is_decoupled",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          }
        },
        "methods": {
          "decouple": {
            "name": "decouple",
            "description": null,
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "bool"
            }
          }
        }
      },
      "ModuleDeployable": {
        "name": "ModuleDeployable",
        "description": null,
        "fields": {
          "part_name": {
            "name": "part_name",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "deploy_state": {
            "name": "deploy_state",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "extendable": {
            "name": "extendable",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "retractable": {
            "name": "retractable",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          }
        },
        "methods": {
          "set_extended": {
            "name": "set_extended",
            "description": null,
            "parameters": [
              {
                "name": "extend",
                "type": {
                  "kind": "Builtin",
                  "name": "bool"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          }
        }
      },
      "ModuleDockingNode": {
        "name": "ModuleDockingNode",
        "description": null,
        "fields": {
          "is_deployable_docking_port": {
            "name": "is_deployable_docking_port",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "docking_state": {
            "name": "docking_state",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "DockingState"
            }
          },
          "node_types": {
            "name": "node_types",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "",
              "name": "string[]"
            }
          },
          "vessel": {
            "name": "vessel",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            }
          },
          "part_name": {
            "name": "part_name",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "global_position": {
            "name": "global_position",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalPosition"
            }
          },
          "global_rotation": {
            "name": "global_rotation",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalDirection"
            }
          },
          "is_engine": {
            "name": "is_engine",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "activation_stage": {
            "name": "activation_stage",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "int"
            }
          },
          "decouple_stage": {
            "name": "decouple_stage",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "int"
            }
          },
          "resources": {
            "name": "resources",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::resource",
              "name": "ResourceContainer"
            }
          },
          "air_intake": {
            "name": "air_intake",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "ModuleAirIntake>"
            }
          },
          "docking_node": {
            "name": "docking_node",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "ModuleDockingNode>"
            }
          },
          "engine_module": {
            "name": "engine_module",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "ModuleEngine>"
            }
          },
          "is_solar_panel": {
            "name": "is_solar_panel",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "solar_panel": {
            "name": "solar_panel",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "ModuleSolarPanel>"
            }
          },
          "is_fairing": {
            "name": "is_fairing",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "fairing": {
            "name": "fairing",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "ModuleFairing>"
            }
          },
          "is_deployable": {
            "name": "is_deployable",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "deployable": {
            "name": "deployable",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "ModuleDeployable>"
            }
          },
          "is_decoupler": {
            "name": "is_decoupler",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "decoupler": {
            "name": "decoupler",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "ModuleDecoupler>"
            }
          },
          "is_launch_clamp": {
            "name": "is_launch_clamp",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "launch_clamp": {
            "name": "launch_clamp",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "ModuleLaunchClamp>"
            }
          },
          "is_parachute": {
            "name": "is_parachute",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "parachute": {
            "name": "parachute",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "ModuleParachute>"
            }
          }
        },
        "methods": {}
      },
      "ModuleEngine": {
        "name": "ModuleEngine",
        "description": null,
        "fields": {
          "part_name": {
            "name": "part_name",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "is_shutdown": {
            "name": "is_shutdown",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "has_ignited": {
            "name": "has_ignited",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "is_flameout": {
            "name": "is_flameout",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "is_staged": {
            "name": "is_staged",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "is_operational": {
            "name": "is_operational",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "current_throttle": {
            "name": "current_throttle",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "current_thrust": {
            "name": "current_thrust",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "throttle_min": {
            "name": "throttle_min",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "min_fuel_flow": {
            "name": "min_fuel_flow",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "max_fuel_flow": {
            "name": "max_fuel_flow",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "max_thrust_output_vac": {
            "name": "max_thrust_output_vac",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "max_thrust_output_atm": {
            "name": "max_thrust_output_atm",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "engine_modes": {
            "name": "engine_modes",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "EngineMode[]"
            }
          },
          "current_engine_mode": {
            "name": "current_engine_mode",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "EngineMode"
            }
          }
        },
        "methods": {
          "change_mode": {
            "name": "change_mode",
            "description": null,
            "parameters": [
              {
                "name": "name",
                "type": {
                  "kind": "Builtin",
                  "name": "string"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "bool"
            }
          }
        }
      },
      "ModuleFairing": {
        "name": "ModuleFairing",
        "description": null,
        "fields": {
          "part_name": {
            "name": "part_name",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "ejection_force": {
            "name": "ejection_force",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "is_jettisoned": {
            "name": "is_jettisoned",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          }
        },
        "methods": {
          "jettison": {
            "name": "jettison",
            "description": null,
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "bool"
            }
          }
        }
      },
      "ModuleLaunchClamp": {
        "name": "ModuleLaunchClamp",
        "description": null,
        "fields": {
          "part_name": {
            "name": "part_name",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "is_released": {
            "name": "is_released",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          }
        },
        "methods": {
          "release": {
            "name": "release",
            "description": null,
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "bool"
            }
          }
        }
      },
      "ModuleParachute": {
        "name": "ModuleParachute",
        "description": null,
        "fields": {
          "deploy_state": {
            "name": "deploy_state",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "ParachuteDeployState"
            }
          },
          "chute_safety": {
            "name": "chute_safety",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "ParachuteSafeStates"
            }
          },
          "deploy_mode": {
            "name": "deploy_mode",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "ParachuteDeployMode"
            }
          },
          "min_air_pressure": {
            "name": "min_air_pressure",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "deploy_altitude": {
            "name": "deploy_altitude",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "armed": {
            "name": "armed",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          }
        },
        "methods": {
          "deploy": {
            "name": "deploy",
            "description": null,
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "cut": {
            "name": "cut",
            "description": null,
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "repack": {
            "name": "repack",
            "description": null,
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "bool"
            }
          }
        }
      },
      "ModuleSolarPanel": {
        "name": "ModuleSolarPanel",
        "description": null,
        "fields": {
          "part_name": {
            "name": "part_name",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "energy_flow": {
            "name": "energy_flow",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "blocking_body": {
            "name": "blocking_body",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "Option<ksp::orbit",
              "name": "Body>"
            }
          }
        },
        "methods": {}
      },
      "Part": {
        "name": "Part",
        "description": null,
        "fields": {
          "vessel": {
            "name": "vessel",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            }
          },
          "part_name": {
            "name": "part_name",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "global_position": {
            "name": "global_position",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalPosition"
            }
          },
          "global_rotation": {
            "name": "global_rotation",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalDirection"
            }
          },
          "is_engine": {
            "name": "is_engine",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "activation_stage": {
            "name": "activation_stage",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "int"
            }
          },
          "decouple_stage": {
            "name": "decouple_stage",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "int"
            }
          },
          "resources": {
            "name": "resources",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::resource",
              "name": "ResourceContainer"
            }
          },
          "air_intake": {
            "name": "air_intake",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "ModuleAirIntake>"
            }
          },
          "docking_node": {
            "name": "docking_node",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "ModuleDockingNode>"
            }
          },
          "engine_module": {
            "name": "engine_module",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "ModuleEngine>"
            }
          },
          "is_solar_panel": {
            "name": "is_solar_panel",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "solar_panel": {
            "name": "solar_panel",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "ModuleSolarPanel>"
            }
          },
          "is_fairing": {
            "name": "is_fairing",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "fairing": {
            "name": "fairing",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "ModuleFairing>"
            }
          },
          "is_deployable": {
            "name": "is_deployable",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "deployable": {
            "name": "deployable",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "ModuleDeployable>"
            }
          },
          "is_decoupler": {
            "name": "is_decoupler",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "decoupler": {
            "name": "decoupler",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "ModuleDecoupler>"
            }
          },
          "is_launch_clamp": {
            "name": "is_launch_clamp",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "launch_clamp": {
            "name": "launch_clamp",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "ModuleLaunchClamp>"
            }
          },
          "is_parachute": {
            "name": "is_parachute",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "parachute": {
            "name": "parachute",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "ModuleParachute>"
            }
          }
        },
        "methods": {}
      },
      "Staging": {
        "name": "Staging",
        "description": null,
        "fields": {
          "current": {
            "name": "current",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "int"
            }
          },
          "count": {
            "name": "count",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "int"
            }
          },
          "total_count": {
            "name": "total_count",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "int"
            }
          },
          "ready": {
            "name": "ready",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          }
        },
        "methods": {
          "next": {
            "name": "next",
            "description": null,
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "parts_in_stage": {
            "name": "parts_in_stage",
            "description": null,
            "parameters": [
              {
                "name": "stage",
                "type": {
                  "kind": "Builtin",
                  "name": "int"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Part[]"
            }
          }
        }
      },
      "Targetable": {
        "name": "Targetable",
        "description": null,
        "fields": {
          "name": {
            "name": "name",
            "description": "Name of the vessel target.\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "orbit": {
            "name": "orbit",
            "description": "Orbit of the vessel target.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            }
          },
          "body": {
            "name": "body",
            "description": "Get the targeted celestial body, if target is a body.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "Option<ksp::orbit",
              "name": "Body>"
            }
          },
          "vessel": {
            "name": "vessel",
            "description": "Get the targeted vessel, if target is a vessel.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "Vessel>"
            }
          },
          "docking_node": {
            "name": "docking_node",
            "description": "Get the targeted docking node, if target is a docking node.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "ModuleDockingNode>"
            }
          }
        },
        "methods": {}
      },
      "Vessel": {
        "name": "Vessel",
        "description": "Represents an in-game vessel, which might be a rocket, plane, rover ... or actually just a Kerbal in a spacesuite.\n",
        "fields": {
          "name": {
            "name": "name",
            "description": "The name of the vessel.\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "string"
            }
          },
          "is_active": {
            "name": "is_active",
            "description": "Check if the vessel is currently active.\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "control_status": {
            "name": "control_status",
            "description": "Current control status of the vessel.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "VesselControlState"
            }
          },
          "maneuver": {
            "name": "maneuver",
            "description": "Collection of methods to interact with the maneuver plan of the vessel.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Maneuver"
            }
          },
          "actions": {
            "name": "actions",
            "description": "Collection of methods to trigger action groups.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "ActionGroups"
            }
          },
          "autopilot": {
            "name": "autopilot",
            "description": "Collection of methods to interact with the SAS system of the vessel.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Autopilot"
            }
          },
          "delta_v": {
            "name": "delta_v",
            "description": "Collection of methods to obtain delta-v information of the vessel.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "VesselDeltaV"
            }
          },
          "staging": {
            "name": "staging",
            "description": "Collection of methods to obtain information about stages and trigger staging.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Staging"
            }
          },
          "main_body": {
            "name": "main_body",
            "description": "The main body of the current SOI the vessel is in.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Body"
            }
          },
          "orbit": {
            "name": "orbit",
            "description": "Current orbit or orbit patch of the vessel.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            }
          },
          "celestial_frame": {
            "name": "celestial_frame",
            "description": "The celestial/non-rotating reference frame of the vessel.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "TransformFrame"
            }
          },
          "body_frame": {
            "name": "body_frame",
            "description": "The body/rotating reference frame of the vessel.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "TransformFrame"
            }
          },
          "control_frame": {
            "name": "control_frame",
            "description": "Reference frame for the current control position.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "TransformFrame"
            }
          },
          "horizon_frame": {
            "name": "horizon_frame",
            "description": "Reference frame for the horizon at the current position of the vessel.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "TransformFrame"
            }
          },
          "global_position": {
            "name": "global_position",
            "description": "Coordinate independent position of the vessel.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalPosition"
            }
          },
          "global_velocity": {
            "name": "global_velocity",
            "description": "Get the coordinate independent velocity of the vessel.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVelocity"
            }
          },
          "orbital_velocity": {
            "name": "orbital_velocity",
            "description": "Orbital velocity of the vessel relative to the main body.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "surface_velocity": {
            "name": "surface_velocity",
            "description": "Surface velocity of the vessel relative to the main body.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "mass": {
            "name": "mass",
            "description": "Total mass of the vessel.\n",
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "CoM": {
            "name": "CoM",
            "description": "Position of the center of mass of the vessel.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "global_center_of_mass": {
            "name": "global_center_of_mass",
            "description": "Coordinate independent position of the center of mass.\n",
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalPosition"
            }
          },
          "offset_ground": {
            "name": "offset_ground",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "atmosphere_density": {
            "name": "atmosphere_density",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "heading": {
            "name": "heading",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "horizontal_surface_speed": {
            "name": "horizontal_surface_speed",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "vertical_surface_speed": {
            "name": "vertical_surface_speed",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "altitude_terrain": {
            "name": "altitude_terrain",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "altitude_sealevel": {
            "name": "altitude_sealevel",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "altitude_scenery": {
            "name": "altitude_scenery",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "global_angular_momentum": {
            "name": "global_angular_momentum",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalAngularVelocity"
            }
          },
          "global_angular_velocity": {
            "name": "global_angular_velocity",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalAngularVelocity"
            }
          },
          "global_moment_of_inertia": {
            "name": "global_moment_of_inertia",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            }
          },
          "total_torque": {
            "name": "total_torque",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "angular_momentum": {
            "name": "angular_momentum",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "angular_velocity": {
            "name": "angular_velocity",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "vertical_speed": {
            "name": "vertical_speed",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "geo_coordinates": {
            "name": "geo_coordinates",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "GeoCoordinates"
            }
          },
          "up": {
            "name": "up",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "north": {
            "name": "north",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "east": {
            "name": "east",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "global_up": {
            "name": "global_up",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            }
          },
          "global_north": {
            "name": "global_north",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            }
          },
          "global_east": {
            "name": "global_east",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            }
          },
          "situation": {
            "name": "situation",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "VesselSituation"
            }
          },
          "static_pressure_kpa": {
            "name": "static_pressure_kpa",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "dynamic_pressure_kpa": {
            "name": "dynamic_pressure_kpa",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "sound_speed": {
            "name": "sound_speed",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "mach_number": {
            "name": "mach_number",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "facing": {
            "name": "facing",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Direction"
            }
          },
          "global_facing": {
            "name": "global_facing",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalDirection"
            }
          },
          "parts": {
            "name": "parts",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Part[]"
            }
          },
          "air_intakes": {
            "name": "air_intakes",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "ModuleAirIntake[]"
            }
          },
          "engines": {
            "name": "engines",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "ModuleEngine[]"
            }
          },
          "docking_nodes": {
            "name": "docking_nodes",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "ModuleDockingNode[]"
            }
          },
          "solar_panels": {
            "name": "solar_panels",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "ModuleSolarPanel[]"
            }
          },
          "target": {
            "name": "target",
            "description": null,
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "Targetable>"
            }
          },
          "available_thrust": {
            "name": "available_thrust",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "pitch_yaw_roll": {
            "name": "pitch_yaw_roll",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          }
        },
        "methods": {
          "heading_direction": {
            "name": "heading_direction",
            "description": null,
            "parameters": [
              {
                "name": "degreesFromNorth",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "pitchAboveHorizon",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "roll",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Direction"
            }
          },
          "global_heading_direction": {
            "name": "global_heading_direction",
            "description": null,
            "parameters": [
              {
                "name": "degreesFromNorth",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "pitchAboveHorizon",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "roll",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalDirection"
            }
          },
          "set_steering": {
            "name": "set_steering",
            "description": null,
            "parameters": [
              {
                "name": "pitchYawRoll",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "Vec3"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::control",
              "name": "SteeringManager"
            }
          },
          "manage_steering": {
            "name": "manage_steering",
            "description": null,
            "parameters": [
              {
                "name": "pitchYawRollProvider",
                "type": {
                  "kind": "Standard",
                  "module": "sync fn(float) -> ksp::math",
                  "name": "Vec3"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::control",
              "name": "SteeringManager"
            }
          },
          "set_throttle": {
            "name": "set_throttle",
            "description": null,
            "parameters": [
              {
                "name": "throttle",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::control",
              "name": "ThrottleManager"
            }
          },
          "manage_throttle": {
            "name": "manage_throttle",
            "description": null,
            "parameters": [
              {
                "name": "throttleProvider",
                "type": {
                  "kind": "Standard",
                  "module": "",
                  "name": "sync fn(float) -> float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::control",
              "name": "ThrottleManager"
            }
          },
          "set_rcs_translate": {
            "name": "set_rcs_translate",
            "description": null,
            "parameters": [
              {
                "name": "translate",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "Vec3"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::control",
              "name": "RCSTranslateManager"
            }
          },
          "manage_rcs_translate": {
            "name": "manage_rcs_translate",
            "description": null,
            "parameters": [
              {
                "name": "translateProvider",
                "type": {
                  "kind": "Standard",
                  "module": "sync fn(float) -> ksp::math",
                  "name": "Vec3"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::control",
              "name": "RCSTranslateManager"
            }
          },
          "set_wheel_steering": {
            "name": "set_wheel_steering",
            "description": null,
            "parameters": [
              {
                "name": "wheelSteering",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::control",
              "name": "WheelSteeringManager"
            }
          },
          "manage_wheel_steering": {
            "name": "manage_wheel_steering",
            "description": null,
            "parameters": [
              {
                "name": "wheelSteeringProvider",
                "type": {
                  "kind": "Standard",
                  "module": "",
                  "name": "sync fn(float) -> float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::control",
              "name": "WheelSteeringManager"
            }
          },
          "set_wheel_throttle": {
            "name": "set_wheel_throttle",
            "description": null,
            "parameters": [
              {
                "name": "wheelThrottle",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::control",
              "name": "WheelThrottleManager"
            }
          },
          "manage_wheel_throttle": {
            "name": "manage_wheel_throttle",
            "description": null,
            "parameters": [
              {
                "name": "wheelThrottleProvider",
                "type": {
                  "kind": "Standard",
                  "module": "",
                  "name": "sync fn(float) -> float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::control",
              "name": "WheelThrottleManager"
            }
          },
          "release_control": {
            "name": "release_control",
            "description": null,
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "override_input_pitch": {
            "name": "override_input_pitch",
            "description": null,
            "parameters": [
              {
                "name": "value",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "override_input_roll": {
            "name": "override_input_roll",
            "description": null,
            "parameters": [
              {
                "name": "value",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "override_input_yaw": {
            "name": "override_input_yaw",
            "description": null,
            "parameters": [
              {
                "name": "value",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "override_input_translate_x": {
            "name": "override_input_translate_x",
            "description": null,
            "parameters": [
              {
                "name": "value",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "override_input_translate_y": {
            "name": "override_input_translate_y",
            "description": null,
            "parameters": [
              {
                "name": "value",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "override_input_translate_z": {
            "name": "override_input_translate_z",
            "description": null,
            "parameters": [
              {
                "name": "value",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          }
        }
      },
      "VesselDeltaV": {
        "name": "VesselDeltaV",
        "description": null,
        "fields": {
          "stages": {
            "name": "stages",
            "description": null,
            "readOnly": true,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "StageDeltaV[]"
            }
          }
        },
        "methods": {
          "stage": {
            "name": "stage",
            "description": "Get delta-v information for a specific `stage` of the vessel, if existent.\n",
            "parameters": [
              {
                "name": "stage",
                "type": {
                  "kind": "Builtin",
                  "name": "int"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "Option<ksp::vessel",
              "name": "StageDeltaV>"
            }
          }
        }
      }
    },
    "constants": {
      "AutopilotMode": {
        "name": "AutopilotMode",
        "description": "Vessel autopilot (SAS) mode",
        "type": {
          "kind": "Standard",
          "module": "ksp::vessel",
          "name": "AutopilotModeConstants"
        }
      },
      "DeltaVSituation": {
        "name": "DeltaVSituation",
        "description": "Vessel situation for delta-v calculation",
        "type": {
          "kind": "Standard",
          "module": "ksp::vessel",
          "name": "DeltaVSituationConstants"
        }
      },
      "ParachuteDeployState": {
        "name": "ParachuteDeployState",
        "description": "Parachute deploy state",
        "type": {
          "kind": "Standard",
          "module": "ksp::vessel",
          "name": "ParachuteDeployStateConstants"
        }
      },
      "ParachuteDeployMode": {
        "name": "ParachuteDeployMode",
        "description": "Parachute deploy mode",
        "type": {
          "kind": "Standard",
          "module": "ksp::vessel",
          "name": "ParachuteDeployModeConstants"
        }
      },
      "ParachuteSafeStates": {
        "name": "ParachuteSafeStates",
        "description": "Parachute safe states",
        "type": {
          "kind": "Standard",
          "module": "ksp::vessel",
          "name": "ParachuteSafeStatesConstants"
        }
      },
      "EngineType": {
        "name": "EngineType",
        "description": "Engine types",
        "type": {
          "kind": "Standard",
          "module": "ksp::vessel",
          "name": "EngineTypeConstants"
        }
      },
      "VesselSituation": {
        "name": "VesselSituation",
        "description": "Vessel situation",
        "type": {
          "kind": "Standard",
          "module": "ksp::vessel",
          "name": "VesselSituationConstants"
        }
      },
      "VesselControlState": {
        "name": "VesselControlState",
        "description": "Vessel control state",
        "type": {
          "kind": "Standard",
          "module": "ksp::vessel",
          "name": "VesselControlStateConstants"
        }
      },
      "DockingState": {
        "name": "DockingState",
        "description": "Current state of a docking node",
        "type": {
          "kind": "Standard",
          "module": "ksp::vessel",
          "name": "DockingStateConstants"
        }
      }
    },
    "functions": {
      "active_vessel": {
        "name": "active_vessel",
        "description": "Try to get the currently active vessel. Will result in an error if there is none.\n",
        "parameters": [],
        "returnType": {
          "kind": "Standard",
          "module": "Result<ksp::vessel",
          "name": "Vessel, string>"
        }
      }
    }
  },
  "log::log_helper": {
    "name": "log::log_helper",
    "description": "********************************************************************************************************************\n\nLOG HELPER\n\nABOUT: This script helps with treating the console a log separated by three scetions. Telemetry, Debug and Messages.\nNote that you must always call the log_init first\n\n********************************************************************************************************************",
    "types": {},
    "constants": {},
    "functions": {
      "log_init": {
        "name": "log_init",
        "description": "",
        "parameters": [
          {
            "name": "header",
            "type": {
              "kind": "Builtin",
              "name": "string"
            },
            "hasDefault": true
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "log_console_telemetry": {
        "name": "log_console_telemetry",
        "description": "",
        "parameters": [
          {
            "name": "row",
            "type": {
              "kind": "Builtin",
              "name": "int"
            },
            "hasDefault": false
          },
          {
            "name": "message",
            "type": {
              "kind": "Builtin",
              "name": "string"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "log_console_debug": {
        "name": "log_console_debug",
        "description": "",
        "parameters": [
          {
            "name": "row",
            "type": {
              "kind": "Builtin",
              "name": "int"
            },
            "hasDefault": false
          },
          {
            "name": "message",
            "type": {
              "kind": "Builtin",
              "name": "string"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "log_console_message": {
        "name": "log_console_message",
        "description": "",
        "parameters": [
          {
            "name": "message",
            "type": {
              "kind": "Builtin",
              "name": "string"
            },
            "hasDefault": false
          },
          {
            "name": "isLastMessage",
            "type": {
              "kind": "Builtin",
              "name": "bool"
            },
            "hasDefault": true
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      }
    }
  },
  "std::atmo": {
    "name": "std::atmo",
    "description": "",
    "types": {},
    "constants": {},
    "functions": {
      "atmo_launch": {
        "name": "atmo_launch",
        "description": "Automatically launch a rocket from an atmosphere to a circular orbit.",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          },
          {
            "name": "target_apoapsis",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "heading",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "low_turn",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": true
          },
          {
            "name": "high_turn",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": true
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "",
          "name": "Result<Unit, string>"
        }
      },
      "atmo_launch_ascent": {
        "name": "atmo_launch_ascent",
        "description": "Perform a rocket launch ascent from an atmosphere.\n\nNote: The rocket will not end up in a stable orbit and most likely crash if no further action\nis taken.",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          },
          {
            "name": "target_apoapsis",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "heading",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "low_turn",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": true
          },
          {
            "name": "high_turn",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": true
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      }
    }
  },
  "std::control::steering": {
    "name": "std::control::steering",
    "description": "",
    "types": {
      "SteeringController": {
        "name": "SteeringController",
        "description": "Adaptation of the steering controller in kOS.",
        "fields": {
          "target_direction": {
            "name": "target_direction",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalDirection"
            }
          },
          "enable_torque_adjust": {
            "name": "enable_torque_adjust",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "max_stopping_time": {
            "name": "max_stopping_time",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "roll_control_angle_range": {
            "name": "roll_control_angle_range",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "pitch_torque_adjust": {
            "name": "pitch_torque_adjust",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "yaw_torque_adjust": {
            "name": "yaw_torque_adjust",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "roll_torque_adjust": {
            "name": "roll_torque_adjust",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "pitch_torque_factor": {
            "name": "pitch_torque_factor",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "yaw_torque_factor": {
            "name": "yaw_torque_factor",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "roll_torque_factor": {
            "name": "roll_torque_factor",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "vessel": {
            "name": "vessel",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            }
          },
          "pitch_torque_calc": {
            "name": "pitch_torque_calc",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::control",
              "name": "MovingAverage"
            }
          },
          "yaw_torque_calc": {
            "name": "yaw_torque_calc",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::control",
              "name": "MovingAverage"
            }
          },
          "roll_torque_calc": {
            "name": "roll_torque_calc",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::control",
              "name": "MovingAverage"
            }
          },
          "pitch_pi": {
            "name": "pitch_pi",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::control",
              "name": "TorquePI"
            }
          },
          "yaw_pi": {
            "name": "yaw_pi",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::control",
              "name": "TorquePI"
            }
          },
          "roll_pi": {
            "name": "roll_pi",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::control",
              "name": "TorquePI"
            }
          },
          "pitch_rate_pi": {
            "name": "pitch_rate_pi",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::control",
              "name": "PIDLoop"
            }
          },
          "yaw_rate_pi": {
            "name": "yaw_rate_pi",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::control",
              "name": "PIDLoop"
            }
          },
          "roll_rate_pi": {
            "name": "roll_rate_pi",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::control",
              "name": "PIDLoop"
            }
          },
          "target_rot": {
            "name": "target_rot",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Direction"
            }
          },
          "center_of_mass": {
            "name": "center_of_mass",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "target_forward": {
            "name": "target_forward",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "target_top": {
            "name": "target_top",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "target_starboard": {
            "name": "target_starboard",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "adjust_torque": {
            "name": "adjust_torque",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "omega": {
            "name": "omega",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "angular_acceleration": {
            "name": "angular_acceleration",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "moment_of_inertia": {
            "name": "moment_of_inertia",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "measured_torque": {
            "name": "measured_torque",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "control_torque": {
            "name": "control_torque",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "raw_torque": {
            "name": "raw_torque",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "acc_pitch": {
            "name": "acc_pitch",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "acc_yaw": {
            "name": "acc_yaw",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "acc_roll": {
            "name": "acc_roll",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "phi": {
            "name": "phi",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "phi_pitch": {
            "name": "phi_pitch",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "phi_yaw": {
            "name": "phi_yaw",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "phi_roll": {
            "name": "phi_roll",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "max_pitch_omega": {
            "name": "max_pitch_omega",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "max_yaw_omega": {
            "name": "max_yaw_omega",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "max_roll_omega": {
            "name": "max_roll_omega",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "tgt_pitch_omega": {
            "name": "tgt_pitch_omega",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "tgt_yaw_omega": {
            "name": "tgt_yaw_omega",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "tgt_roll_omega": {
            "name": "tgt_roll_omega",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "tgt_pitch_torque": {
            "name": "tgt_pitch_torque",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "tgt_yaw_torque": {
            "name": "tgt_yaw_torque",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "tgt_roll_torque": {
            "name": "tgt_roll_torque",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          }
        },
        "methods": {
          "update": {
            "name": "update",
            "description": "",
            "parameters": [
              {
                "name": "delta_t",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "reset_i": {
            "name": "reset_i",
            "description": "",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "update_state_vectors": {
            "name": "update_state_vectors",
            "description": "",
            "parameters": [
              {
                "name": "delta_t",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "update_torque": {
            "name": "update_torque",
            "description": "",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "update_prediction_pi": {
            "name": "update_prediction_pi",
            "description": "",
            "parameters": [
              {
                "name": "delta_t",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "update_control": {
            "name": "update_control",
            "description": "",
            "parameters": [],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "print_debug": {
            "name": "print_debug",
            "description": "",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          }
        }
      },
      "SteeringControl": {
        "name": "SteeringControl",
        "description": "Helper to use `SteeringController` with a `SteeringManager` of a vessel.\nUse the `control_steering` function to set it up correctly.",
        "fields": {
          "manager": {
            "name": "manager",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::control",
              "name": "SteeringManager"
            }
          },
          "controller": {
            "name": "controller",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "std::control::steering",
              "name": "SteeringController"
            }
          }
        },
        "methods": {
          "set_global_direction": {
            "name": "set_global_direction",
            "description": "",
            "parameters": [
              {
                "name": "dir",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "GlobalDirection"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "set_direction": {
            "name": "set_direction",
            "description": "",
            "parameters": [
              {
                "name": "dir",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "Direction"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "set_heading": {
            "name": "set_heading",
            "description": "",
            "parameters": [
              {
                "name": "degrees_from_north",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "pitch_above_horizon",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              },
              {
                "name": "roll",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "release": {
            "name": "release",
            "description": "",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "resume": {
            "name": "resume",
            "description": "",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          }
        }
      }
    },
    "constants": {},
    "functions": {
      "control_steering": {
        "name": "control_steering",
        "description": "Control the steering of a vessel.\nExample usage:\n```rust\nuse { control_steering } from std::control::steering\n...\nconst control = control_steering(vessel)\n// vessel is now controlled and will keep its current rotation\n\ncontrol.set_heading(30, 10, 5) // change the desired rotation\nsleep(5) // Give the controller time to steer the vessel\n...\ncontrol.release() // release control of the vessel\n```",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "std::control::steering",
          "name": "SteeringControl"
        }
      },
      "SteeringController": {
        "name": "SteeringController",
        "description": "Adaptation of the steering controller in kOS.",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          },
          {
            "name": "target_direction",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalDirection"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "std::control::steering",
          "name": "SteeringController"
        }
      },
      "SteeringControl": {
        "name": "SteeringControl",
        "description": "Helper to use `SteeringController` with a `SteeringManager` of a vessel.\nUse the `control_steering` function to set it up correctly.",
        "parameters": [
          {
            "name": "manager",
            "type": {
              "kind": "Standard",
              "module": "ksp::control",
              "name": "SteeringManager"
            },
            "hasDefault": false
          },
          {
            "name": "controller",
            "type": {
              "kind": "Standard",
              "module": "std::control::steering",
              "name": "SteeringController"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "std::control::steering",
          "name": "SteeringControl"
        }
      }
    }
  },
  "std::lambert": {
    "name": "std::lambert",
    "description": "",
    "types": {},
    "constants": {},
    "functions": {
      "solve_lambert": {
        "name": "solve_lambert",
        "description": "Solve Lambert's problem, i.e. calculate the Kepler orbit to get from point `r1`\nto point `r2` in time `tof` (time of flight).\n\n* `mu` is the standard gravitational parameter of the central body\n* `clockwise` defines if a clockwise or counter-clockwise orbit should be calculated\n* The result `v1` is the required velocity at `r1`\n* The result `v2` is the required velocity at `r2`\n\nThis is based on the solver developed by Dario Izzo\nDetails can be found here: https://arxiv.org/pdf/1403.2705.pdf\nReleased under the GNU GENERAL PUBLIC LICENSE as part of the PyKEP library:",
        "parameters": [
          {
            "name": "r1",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            },
            "hasDefault": false
          },
          {
            "name": "r2",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            },
            "hasDefault": false
          },
          {
            "name": "tof",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "mu",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "clockwise",
            "type": {
              "kind": "Builtin",
              "name": "bool"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "(iters : int, v1 : ksp::math::Vec3, v2 : ksp::math",
          "name": "Vec3)"
        }
      }
    }
  },
  "std::land::landing_simulation": {
    "name": "std::land::landing_simulation",
    "description": "",
    "types": {
      "BodyParameters": {
        "name": "BodyParameters",
        "description": "",
        "fields": {
          "celestial_frame": {
            "name": "celestial_frame",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "TransformFrame"
            }
          },
          "position": {
            "name": "position",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "angular_velocity": {
            "name": "angular_velocity",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "aerobraked_radius": {
            "name": "aerobraked_radius",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "decel_radius": {
            "name": "decel_radius",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "landing_radius": {
            "name": "landing_radius",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "speed_policy": {
            "name": "speed_policy",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "sync fn(ksp::math::Vec3, ksp::math",
              "name": "Vec3) -> float"
            }
          },
          "grav_parameter": {
            "name": "grav_parameter",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "lat90_at_start": {
            "name": "lat90_at_start",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "lat0_lon0_at_start": {
            "name": "lat0_lon0_at_start",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "lot0_lon90_at_start": {
            "name": "lot0_lon90_at_start",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "epoch": {
            "name": "epoch",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "rotation_period": {
            "name": "rotation_period",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          }
        },
        "methods": {
          "reset": {
            "name": "reset",
            "description": "",
            "parameters": [
              {
                "name": "body",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::orbit",
                  "name": "Body"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "surface_velocity": {
            "name": "surface_velocity",
            "description": "",
            "parameters": [
              {
                "name": "pos",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "Vec3"
                },
                "hasDefault": false
              },
              {
                "name": "vel",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "Vec3"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "find_freefall_end_time": {
            "name": "find_freefall_end_time",
            "description": "",
            "parameters": [
              {
                "name": "orbit",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::orbit",
                  "name": "Orbit"
                },
                "hasDefault": false
              },
              {
                "name": "ut",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "freefall_ended": {
            "name": "freefall_ended",
            "description": "",
            "parameters": [
              {
                "name": "orbit",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::orbit",
                  "name": "Orbit"
                },
                "hasDefault": false
              },
              {
                "name": "ut",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "total_accel": {
            "name": "total_accel",
            "description": "",
            "parameters": [
              {
                "name": "pos",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "Vec3"
                },
                "hasDefault": false
              },
              {
                "name": "vel",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "Vec3"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "grav_accel": {
            "name": "grav_accel",
            "description": "",
            "parameters": [
              {
                "name": "pos",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "Vec3"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "surface_position": {
            "name": "surface_position",
            "description": "",
            "parameters": [
              {
                "name": "pos",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::math",
                  "name": "Vec3"
                },
                "hasDefault": false
              },
              {
                "name": "UT",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "",
              "name": "(latitude : float, longitude : float)"
            }
          }
        }
      },
      "(brake_time : float, end_latitude : float, end_longitude : float, end_time : float, path : ksp::math::GlobalPosition[])": {
        "name": "(brake_time : float, end_latitude : float, end_longitude : float, end_time : float, path : ksp::math::GlobalPosition[])",
        "description": "",
        "fields": {
          "brake_time": {
            "name": "brake_time",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "end_latitude": {
            "name": "end_latitude",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "end_longitude": {
            "name": "end_longitude",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "end_time": {
            "name": "end_time",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "path": {
            "name": "path",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalPosition[]"
            }
          }
        },
        "methods": {}
      },
      "ReentrySimulation": {
        "name": "ReentrySimulation",
        "description": "",
        "fields": {
          "body": {
            "name": "body",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "std::land::landing_simulation",
              "name": "BodyParameters"
            }
          },
          "t": {
            "name": "t",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "x": {
            "name": "x",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "v": {
            "name": "v",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            }
          },
          "dt": {
            "name": "dt",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "start_dt": {
            "name": "start_dt",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "min_dt": {
            "name": "min_dt",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "max_thrust_accel": {
            "name": "max_thrust_accel",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "deltav_expended": {
            "name": "deltav_expended",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "float"
            }
          },
          "steps": {
            "name": "steps",
            "description": "",
            "readOnly": false,
            "type": {
              "kind": "Builtin",
              "name": "int"
            }
          }
        },
        "methods": {
          "reset": {
            "name": "reset",
            "description": "",
            "parameters": [
              {
                "name": "vessel",
                "type": {
                  "kind": "Standard",
                  "module": "ksp::vessel",
                  "name": "Vessel"
                },
                "hasDefault": false
              },
              {
                "name": "start_ut",
                "type": {
                  "kind": "Builtin",
                  "name": "float"
                },
                "hasDefault": false
              }
            ],
            "returnType": {
              "kind": "Standard",
              "module": "std::land::landing_simulation",
              "name": "ReentrySimulation"
            }
          },
          "run": {
            "name": "run",
            "description": "",
            "parameters": [],
            "returnType": {
              "kind": "Standard",
              "module": "(brake_time : float, end_latitude : float, end_longitude : float, end_time : float, path : ksp::math",
              "name": "GlobalPosition[])"
            }
          },
          "bs34_step": {
            "name": "bs34_step",
            "description": "",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "limit_speed": {
            "name": "limit_speed",
            "description": "",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "Unit"
            }
          },
          "landed": {
            "name": "landed",
            "description": "",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "bool"
            }
          },
          "escaping": {
            "name": "escaping",
            "description": "",
            "parameters": [],
            "returnType": {
              "kind": "Builtin",
              "name": "bool"
            }
          }
        }
      }
    },
    "constants": {},
    "functions": {
      "init_simulation": {
        "name": "init_simulation",
        "description": "",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          },
          {
            "name": "start_ut",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "start_dt",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "min_dt",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "max_thrust_accel",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "landing_altitude_asl",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "speed_policy",
            "type": {
              "kind": "Standard",
              "module": "sync fn(ksp::math::Vec3, ksp::math",
              "name": "Vec3) -> float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "std::land::landing_simulation",
          "name": "ReentrySimulation"
        }
      },
      "BodyParameters": {
        "name": "BodyParameters",
        "description": "",
        "parameters": [
          {
            "name": "body",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Body"
            },
            "hasDefault": false
          },
          {
            "name": "decel_end_altitude_asl",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "landing_altitude_asl",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "speed_policy",
            "type": {
              "kind": "Standard",
              "module": "sync fn(ksp::math::Vec3, ksp::math",
              "name": "Vec3) -> float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "std::land::landing_simulation",
          "name": "BodyParameters"
        }
      },
      "ReentrySimulation": {
        "name": "ReentrySimulation",
        "description": "",
        "parameters": [
          {
            "name": "body",
            "type": {
              "kind": "Standard",
              "module": "std::land::landing_simulation",
              "name": "BodyParameters"
            },
            "hasDefault": false
          },
          {
            "name": "start_dt",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "min_dt",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "max_thrust_accel",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "std::land::landing_simulation",
          "name": "ReentrySimulation"
        }
      }
    }
  },
  "std::land::lib": {
    "name": "std::land::lib",
    "description": "",
    "types": {},
    "constants": {},
    "functions": {
      "land_time_to_longitude": {
        "name": "land_time_to_longitude",
        "description": "",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          },
          {
            "name": "longitude",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "land_deorbit_delta_v": {
        "name": "land_deorbit_delta_v",
        "description": "",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          },
          {
            "name": "alt",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      }
    }
  },
  "std::land::speed_policy": {
    "name": "std::land::speed_policy",
    "description": "",
    "types": {
      "sync fn(ksp::math::Vec3, ksp::math::Vec3) -> float": {
        "name": "sync fn(ksp::math::Vec3, ksp::math::Vec3) -> float",
        "description": "",
        "fields": {},
        "methods": {}
      }
    },
    "constants": {},
    "functions": {
      "gravity_turn_speed_policy": {
        "name": "gravity_turn_speed_policy",
        "description": "",
        "parameters": [
          {
            "name": "terrain_radius",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "g",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "thrust",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "sync fn(ksp::math::Vec3, ksp::math",
          "name": "Vec3) -> float"
        }
      },
      "safe_speed_policy": {
        "name": "safe_speed_policy",
        "description": "",
        "parameters": [
          {
            "name": "terrain_radius",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "g",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "thrust",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "sync fn(ksp::math::Vec3, ksp::math",
          "name": "Vec3) -> float"
        }
      },
      "powered_coast_speed_policy": {
        "name": "powered_coast_speed_policy",
        "description": "",
        "parameters": [
          {
            "name": "terrain_radius",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "g",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "thrust",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "sync fn(ksp::math::Vec3, ksp::math",
          "name": "Vec3) -> float"
        }
      }
    }
  },
  "std::land::vac": {
    "name": "std::land::vac",
    "description": "",
    "types": {},
    "constants": {},
    "functions": {
      "vac_land": {
        "name": "vac_land",
        "description": "",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          },
          {
            "name": "landing_side",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "GeoCoordinates"
            },
            "hasDefault": false
          },
          {
            "name": "land_stage",
            "type": {
              "kind": "Builtin",
              "name": "int"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "",
          "name": "Result<Unit, string>"
        }
      },
      "vac_land_prepare_deorbit": {
        "name": "vac_land_prepare_deorbit",
        "description": "",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          },
          {
            "name": "landing_site",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "GeoCoordinates"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "",
          "name": "Result<Unit, string>"
        }
      },
      "vac_land_course_correct": {
        "name": "vac_land_course_correct",
        "description": "",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          },
          {
            "name": "simulation",
            "type": {
              "kind": "Standard",
              "module": "std::land::landing_simulation",
              "name": "ReentrySimulation"
            },
            "hasDefault": false
          },
          {
            "name": "initial_result",
            "type": {
              "kind": "Standard",
              "module": "(brake_time : float, end_latitude : float, end_longitude : float, end_time : float, path : ksp::math",
              "name": "GlobalPosition[])"
            },
            "hasDefault": false
          },
          {
            "name": "landing_site",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "GeoCoordinates"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "Result<(brake_time : float, end_latitude : float, end_longitude : float, end_time : float, path : ksp::math",
          "name": "GlobalPosition[]), string>"
        }
      },
      "vac_deceleration_burn": {
        "name": "vac_deceleration_burn",
        "description": "",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          },
          {
            "name": "simulation",
            "type": {
              "kind": "Standard",
              "module": "std::land::landing_simulation",
              "name": "ReentrySimulation"
            },
            "hasDefault": false
          },
          {
            "name": "initial_result",
            "type": {
              "kind": "Standard",
              "module": "(brake_time : float, end_latitude : float, end_longitude : float, end_time : float, path : ksp::math",
              "name": "GlobalPosition[])"
            },
            "hasDefault": false
          },
          {
            "name": "landing_site",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "GeoCoordinates"
            },
            "hasDefault": false
          },
          {
            "name": "speed_policy",
            "type": {
              "kind": "Standard",
              "module": "sync fn(ksp::math::Vec3, ksp::math",
              "name": "Vec3) -> float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "",
          "name": "Result<Unit, string>"
        }
      },
      "vac_break_zero": {
        "name": "vac_break_zero",
        "description": "",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "vac_touchdown": {
        "name": "vac_touchdown",
        "description": "",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      }
    }
  },
  "std::maneuvers": {
    "name": "std::maneuvers",
    "description": "",
    "types": {},
    "constants": {},
    "functions": {
      "circularize_orbit": {
        "name": "circularize_orbit",
        "description": "Calculate the required delta-v and time to change the given `orbit`\nto a (mostly) circular orbit at the next apoapsis (if `orbit` is elliplic)\nor periapsis (if `orbit` is hyperbolic).",
        "parameters": [
          {
            "name": "orbit",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "Result<(delta_v : ksp::math",
          "name": "Vec3, UT : float), string>"
        }
      },
      "circularize_orbit_pe": {
        "name": "circularize_orbit_pe",
        "description": "Calculate the required delta-v and time to change the given `orbit`\nto a (mostly) circular orbit at the next periapsis",
        "parameters": [
          {
            "name": "orbit",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "Result<(delta_v : ksp::math",
          "name": "Vec3, UT : float), string>"
        }
      },
      "circularize_orbit_at": {
        "name": "circularize_orbit_at",
        "description": "Calculate the required delta-v to change the given `orbit`\nto a (mostly) circular orbit at a given universal time `UT`.",
        "parameters": [
          {
            "name": "orbit",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            },
            "hasDefault": false
          },
          {
            "name": "UT",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "ksp::math",
          "name": "Vec3"
        }
      },
      "ellipticize": {
        "name": "ellipticize",
        "description": "Calculate the required delta-v to change the `apoapsis` and `periapsis` of the given `orbit`\nat time `UT`.",
        "parameters": [
          {
            "name": "orbit",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            },
            "hasDefault": false
          },
          {
            "name": "UT",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "periapsis",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "apoapsis",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "ksp::math",
          "name": "Vec3"
        }
      },
      "change_periapsis": {
        "name": "change_periapsis",
        "description": "Calculate the required delta-v to change the periapsis of an `orbit`\nto `periapsis_radius` at time `UT`",
        "parameters": [
          {
            "name": "orbit",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            },
            "hasDefault": false
          },
          {
            "name": "UT",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "periapsis_radius",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "Result<ksp::math",
          "name": "Vec3, string>"
        }
      },
      "change_apoapsis": {
        "name": "change_apoapsis",
        "description": "Calculate the required delta-v to change the apoapsis of an `orbit`\nto `apoapsis_radius` at time `UT`",
        "parameters": [
          {
            "name": "orbit",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            },
            "hasDefault": false
          },
          {
            "name": "UT",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "apoapsis_radius",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "Result<ksp::math",
          "name": "Vec3, string>"
        }
      },
      "bi_impulsive_transfer_near": {
        "name": "bi_impulsive_transfer_near",
        "description": "Calculate delta-v to intercept a `target` orbit starting nearly at time `UT` with\na nearly transfer time of `TT`. `UT` and `TT` will be optimized for a minimal delta-v for\nacceleration and deacceleration.",
        "parameters": [
          {
            "name": "start",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            },
            "hasDefault": false
          },
          {
            "name": "target",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            },
            "hasDefault": false
          },
          {
            "name": "UT",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "TT",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "Result<(delta_v : ksp::math",
          "name": "Vec3, TT : float, UT : float), string>"
        }
      },
      "bi_impulsive_transfer": {
        "name": "bi_impulsive_transfer",
        "description": "Calculate delta-v to intercept a `target` orbit starting after `min_UT`.\nActual starting and transfer time will be optimized for a minimal delta-v for\nacceleration and deacceleration.\n\nWill result in an error if maneuver nodes cannot be created\n(e.g. because command or tracking facility has not been sufficiently upgraded)",
        "parameters": [
          {
            "name": "start",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            },
            "hasDefault": false
          },
          {
            "name": "target",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            },
            "hasDefault": false
          },
          {
            "name": "min_UT",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "max_UT",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": true
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "Result<(delta_v : ksp::math",
          "name": "Vec3, TT : float, UT : float), string>"
        }
      },
      "bi_impulsive_transfer_body": {
        "name": "bi_impulsive_transfer_body",
        "description": "",
        "parameters": [
          {
            "name": "start",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            },
            "hasDefault": false
          },
          {
            "name": "target",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Body"
            },
            "hasDefault": false
          },
          {
            "name": "min_UT",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "target_periapsis",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "Result<(delta_v : ksp::math",
          "name": "Vec3, TT : float, UT : float), string>"
        }
      },
      "course_correction_body": {
        "name": "course_correction_body",
        "description": "",
        "parameters": [
          {
            "name": "start",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            },
            "hasDefault": false
          },
          {
            "name": "target",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Body"
            },
            "hasDefault": false
          },
          {
            "name": "UT",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "target_periapsis",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "ksp::math",
          "name": "Vec3"
        }
      },
      "intercept_at": {
        "name": "intercept_at",
        "description": "Calculate required delta-v to intercept `target` orbit at time `target_UT` from `start` orbit at time `start_UT`.\n`offset_distance` may be used to define a desired distance to the target.",
        "parameters": [
          {
            "name": "start",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            },
            "hasDefault": false
          },
          {
            "name": "start_UT",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "target",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            },
            "hasDefault": false
          },
          {
            "name": "target_UT",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "offset_distance",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": true
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "(start_velocity : ksp::math::Vec3, target_velocity : ksp::math",
          "name": "Vec3)"
        }
      },
      "ideal_ejection": {
        "name": "ideal_ejection",
        "description": "Calculate the ideal ejection from a (nearly) circular orbit around a given `body`, `radius` and `normal` vector.\nThe resulting orbit is choosen so that the vessel will have a given `exit_velocity` on the SOI radius at time `UT`.",
        "parameters": [
          {
            "name": "body",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Body"
            },
            "hasDefault": false
          },
          {
            "name": "UT",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "radius",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "normal",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            },
            "hasDefault": false
          },
          {
            "name": "exit_velocity",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "ksp::orbit",
          "name": "Orbit"
        }
      },
      "cheapest_course_correction": {
        "name": "cheapest_course_correction",
        "description": "",
        "parameters": [
          {
            "name": "orbit",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            },
            "hasDefault": false
          },
          {
            "name": "min_UT",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "target",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "(delta_v : ksp::math",
          "name": "Vec3, UT : float)"
        }
      },
      "next_closest_approach_time": {
        "name": "next_closest_approach_time",
        "description": "",
        "parameters": [
          {
            "name": "start",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            },
            "hasDefault": false
          },
          {
            "name": "target",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            },
            "hasDefault": false
          },
          {
            "name": "UT",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "match_velocities": {
        "name": "match_velocities",
        "description": "",
        "parameters": [
          {
            "name": "start",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            },
            "hasDefault": false
          },
          {
            "name": "target",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "(delta_v : ksp::math",
          "name": "Vec3, UT : float)"
        }
      },
      "match_inclination": {
        "name": "match_inclination",
        "description": "",
        "parameters": [
          {
            "name": "start",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            },
            "hasDefault": false
          },
          {
            "name": "target",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "(delta_v : ksp::math",
          "name": "Vec3, UT : float)"
        }
      },
      "match_periapsis": {
        "name": "match_periapsis",
        "description": "",
        "parameters": [
          {
            "name": "start",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            },
            "hasDefault": false
          },
          {
            "name": "target",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "(delta_v : ksp::math",
          "name": "Vec3, UT : float)"
        }
      },
      "match_apoapsis": {
        "name": "match_apoapsis",
        "description": "",
        "parameters": [
          {
            "name": "start",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            },
            "hasDefault": false
          },
          {
            "name": "target",
            "type": {
              "kind": "Standard",
              "module": "ksp::orbit",
              "name": "Orbit"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "Result<(delta_v : ksp::math",
          "name": "Vec3, UT : float), string>"
        }
      }
    }
  },
  "std::navball": {
    "name": "std::navball",
    "description": "",
    "types": {},
    "constants": {},
    "functions": {
      "navball": {
        "name": "navball",
        "description": "",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          },
          {
            "name": "dir",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Direction"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "ksp::math",
          "name": "Vec3"
        }
      },
      "global_navball": {
        "name": "global_navball",
        "description": "",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          },
          {
            "name": "dir",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalDirection"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "ksp::math",
          "name": "Vec3"
        }
      }
    }
  },
  "std::numerics::amoeba_optimize": {
    "name": "std::numerics::amoeba_optimize",
    "description": "",
    "types": {},
    "constants": {},
    "functions": {
      "amoeba_optimize_perturbation": {
        "name": "amoeba_optimize_perturbation",
        "description": "",
        "parameters": [
          {
            "name": "func",
            "type": {
              "kind": "Standard",
              "module": "",
              "name": "sync fn(float, float) -> float"
            },
            "hasDefault": false
          },
          {
            "name": "guess",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec2"
            },
            "hasDefault": false
          },
          {
            "name": "perturbation",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec2"
            },
            "hasDefault": false
          },
          {
            "name": "tolerance",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "max_iters",
            "type": {
              "kind": "Builtin",
              "name": "int"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "",
          "name": "Result<(iters : int, x : float, y : float), string>"
        }
      },
      "amoeba_optimize": {
        "name": "amoeba_optimize",
        "description": "",
        "parameters": [
          {
            "name": "func",
            "type": {
              "kind": "Standard",
              "module": "",
              "name": "sync fn(float, float) -> float"
            },
            "hasDefault": false
          },
          {
            "name": "start_points",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec2[]"
            },
            "hasDefault": false
          },
          {
            "name": "tolerance",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "max_iters",
            "type": {
              "kind": "Builtin",
              "name": "int"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "",
          "name": "Result<(iters : int, x : float, y : float), string>"
        }
      }
    }
  },
  "std::numerics::anneal_optimize": {
    "name": "std::numerics::anneal_optimize",
    "description": "",
    "types": {},
    "constants": {},
    "functions": {
      "anneal_optimize": {
        "name": "anneal_optimize",
        "description": "",
        "parameters": [
          {
            "name": "func",
            "type": {
              "kind": "Standard",
              "module": "",
              "name": "sync fn(float, float) -> float"
            },
            "hasDefault": false
          },
          {
            "name": "min",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec2"
            },
            "hasDefault": false
          },
          {
            "name": "max",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec2"
            },
            "hasDefault": false
          },
          {
            "name": "max_temp",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "iters",
            "type": {
              "kind": "Builtin",
              "name": "int"
            },
            "hasDefault": true
          },
          {
            "name": "num_particles",
            "type": {
              "kind": "Builtin",
              "name": "int"
            },
            "hasDefault": true
          },
          {
            "name": "cooling_rate",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": true
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "",
          "name": "(best : (f : float, x : float, y : float), points : (f : float, x : float, y : float)[])"
        }
      }
    }
  },
  "std::numerics::bessel": {
    "name": "std::numerics::bessel",
    "description": "",
    "types": {},
    "constants": {},
    "functions": {
      "J0": {
        "name": "J0",
        "description": "",
        "parameters": [
          {
            "name": "x",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "J1": {
        "name": "J1",
        "description": "",
        "parameters": [
          {
            "name": "x",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      }
    }
  },
  "std::numerics::brent_optimize": {
    "name": "std::numerics::brent_optimize",
    "description": "",
    "types": {},
    "constants": {},
    "functions": {
      "brent_optimize": {
        "name": "brent_optimize",
        "description": "",
        "parameters": [
          {
            "name": "func",
            "type": {
              "kind": "Standard",
              "module": "",
              "name": "sync fn(float) -> float"
            },
            "hasDefault": false
          },
          {
            "name": "start_a",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "start_b",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "tolerance",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "max_iterations",
            "type": {
              "kind": "Builtin",
              "name": "int"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "",
          "name": "Result<(fx : float, x : float), string>"
        }
      }
    }
  },
  "std::numerics::regula_falsi_solve": {
    "name": "std::numerics::regula_falsi_solve",
    "description": "",
    "types": {},
    "constants": {},
    "functions": {
      "regula_falsi_solve": {
        "name": "regula_falsi_solve",
        "description": "",
        "parameters": [
          {
            "name": "func",
            "type": {
              "kind": "Standard",
              "module": "",
              "name": "sync fn(float) -> float"
            },
            "hasDefault": false
          },
          {
            "name": "start_a",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "start_b",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "tolerance",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "max_iterations",
            "type": {
              "kind": "Builtin",
              "name": "int"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      }
    }
  },
  "std::numerics::runge_kutta": {
    "name": "std::numerics::runge_kutta",
    "description": "",
    "types": {},
    "constants": {},
    "functions": {
      "rk23": {
        "name": "rk23",
        "description": "",
        "parameters": [
          {
            "name": "accel",
            "type": {
              "kind": "Standard",
              "module": "sync fn(float, ksp::math::Vec3, ksp::math::Vec3) -> ksp::math",
              "name": "Vec3"
            },
            "hasDefault": false
          },
          {
            "name": "end_condition",
            "type": {
              "kind": "Standard",
              "module": "sync fn(float, ksp::math::Vec3, ksp::math",
              "name": "Vec3) -> bool"
            },
            "hasDefault": false
          },
          {
            "name": "start_t",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "start_position",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            },
            "hasDefault": false
          },
          {
            "name": "start_velocity",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            },
            "hasDefault": false
          },
          {
            "name": "min_dt",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "max_dt",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "(position : ksp::math::Vec3, t : float, velocity : ksp::math",
          "name": "Vec3)[]"
        }
      }
    }
  },
  "std::rendezvous::dock": {
    "name": "std::rendezvous::dock",
    "description": "",
    "types": {},
    "constants": {},
    "functions": {
      "dock_vessel": {
        "name": "dock_vessel",
        "description": "",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          },
          {
            "name": "target",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Targetable"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "",
          "name": "Result<Unit, string>"
        }
      },
      "choose_docking_nodes": {
        "name": "choose_docking_nodes",
        "description": "",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          },
          {
            "name": "target",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Targetable"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "Result<(target_port : ksp::vessel::ModuleDockingNode, vessel_port : ksp::vessel",
          "name": "ModuleDockingNode), string>"
        }
      },
      "dock_move_correct_side": {
        "name": "dock_move_correct_side",
        "description": "",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          },
          {
            "name": "target_port",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "ModuleDockingNode"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "",
          "name": "Result<Unit, string>"
        }
      },
      "dock_approach": {
        "name": "dock_approach",
        "description": "",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          },
          {
            "name": "target_port",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "ModuleDockingNode"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "",
          "name": "Result<Unit, string>"
        }
      }
    }
  },
  "std::rendezvous::lib": {
    "name": "std::rendezvous::lib",
    "description": "",
    "types": {},
    "constants": {},
    "functions": {
      "rendezvous_with": {
        "name": "rendezvous_with",
        "description": "",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          },
          {
            "name": "target",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Targetable"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "",
          "name": "Result<Unit, string>"
        }
      },
      "intercept_target": {
        "name": "intercept_target",
        "description": "",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          },
          {
            "name": "target",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Targetable"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "",
          "name": "Result<Unit, string>"
        }
      },
      "move_to_target": {
        "name": "move_to_target",
        "description": "",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          },
          {
            "name": "target",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Targetable"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "",
          "name": "Result<Unit, string>"
        }
      }
    }
  },
  "std::staging": {
    "name": "std::staging",
    "description": "Collection of helper functions to control staging of a vessel",
    "types": {},
    "constants": {},
    "functions": {
      "trigger_staging": {
        "name": "trigger_staging",
        "description": "Helper function to automatically trigger staging during a burn.\n\nThis function is just checking if one of the ignited engines has has a flameout,\nwhich in most cases means that the current stage has burned out.\n\nWill return `true` if stating has been triggered.",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "bool"
        }
      },
      "has_flameout": {
        "name": "has_flameout",
        "description": "",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "bool"
        }
      },
      "has_still_running": {
        "name": "has_still_running",
        "description": "",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "bool"
        }
      },
      "has_ignited": {
        "name": "has_ignited",
        "description": "",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "bool"
        }
      },
      "has_engine_in_stage": {
        "name": "has_engine_in_stage",
        "description": "",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          },
          {
            "name": "stage",
            "type": {
              "kind": "Builtin",
              "name": "int"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "bool"
        }
      }
    }
  },
  "std::utils": {
    "name": "std::utils",
    "description": "Collection of helper functions not fitting anywhere else",
    "types": {},
    "constants": {},
    "functions": {
      "ship_is_facing": {
        "name": "ship_is_facing",
        "description": "Determine if `vessel` is facing a given direction.\n\n* `max_deviation_degrees` sets a limit how many degrees the angle may differ\n* `max_angular_velocity` sets a limit how much the `vessel` may still be turning",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          },
          {
            "name": "desired_facing",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "Vec3"
            },
            "hasDefault": false
          },
          {
            "name": "max_deviation_degrees",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "max_angular_velocity",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "bool"
        }
      },
      "global_ship_is_facing": {
        "name": "global_ship_is_facing",
        "description": "Determine if `vessel` is facing a given direction. (Coordinate independent version)\n\n* `max_deviation_degrees` sets a limit how many degrees the angle may differ\n* `max_angular_velocity` sets a limit how much the `vessel` may still be turning",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          },
          {
            "name": "desired_facing",
            "type": {
              "kind": "Standard",
              "module": "ksp::math",
              "name": "GlobalVector"
            },
            "hasDefault": false
          },
          {
            "name": "max_deviation_degrees",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "max_angular_velocity",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "bool"
        }
      },
      "remove_all_nodes": {
        "name": "remove_all_nodes",
        "description": "Removes all maneuvering nodes from the flight plan of a `vessel`.",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "Unit"
        }
      },
      "angle_to_360": {
        "name": "angle_to_360",
        "description": "",
        "parameters": [
          {
            "name": "angle",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      },
      "angle_to_180": {
        "name": "angle_to_180",
        "description": "",
        "parameters": [
          {
            "name": "angle",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Builtin",
          "name": "float"
        }
      }
    }
  },
  "std::vac": {
    "name": "std::vac",
    "description": "",
    "types": {},
    "constants": {},
    "functions": {
      "exec_next_node": {
        "name": "exec_next_node",
        "description": "Execute the next planed maneuver node.\n\nWill result in an error if there are no planed maneuver nodes.",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "",
          "name": "Result<Unit, string>"
        }
      },
      "estimate_burn_time": {
        "name": "estimate_burn_time",
        "description": "Estimate the required burn time for a desired `delta_v` in vacuum.\n\n* `stage_delay` is the assumed amount of seconds required for staging\n* `throttle_limit` is a limit for the throttle to be considered",
        "parameters": [
          {
            "name": "vessel",
            "type": {
              "kind": "Standard",
              "module": "ksp::vessel",
              "name": "Vessel"
            },
            "hasDefault": false
          },
          {
            "name": "delta_v",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "stage_delay",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          },
          {
            "name": "throttle_limit",
            "type": {
              "kind": "Builtin",
              "name": "float"
            },
            "hasDefault": false
          }
        ],
        "returnType": {
          "kind": "Standard",
          "module": "",
          "name": "(burn_time : float, half_burn_time : float)"
        }
      }
    }
  }
}