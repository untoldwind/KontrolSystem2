use { current_time } from ksp::game
use { Body, Orbit } from ksp::orbit
use core::math as math
use { vec2, Vec3 } from ksp::math
use { solve_lambert } from std::lambert
use { amoeba_optimize_perturbation } from std::numerics::amoeba_optimize
use { anneal_optimize } from std::numerics::anneal_optimize
use { regula_falsi_solve } from std::numerics::regula_falsi_solve
use { CONSOLE } from ksp::console

/// Calculate the required delta-v and time to change the given `orbit`
/// to a (mostly) circular orbit at the next apoapsis (if `orbit` is elliplic) 
/// or periapsis (if `orbit` is hyperbolic).
pub sync fn circularize_orbit(orbit : Orbit) -> Result<(delta_v: Vec3, UT: float), string> = {
    const UT = if(orbit.eccentricity < 1) orbit.next_apoapsis_time().value else orbit.next_periapsis_time()

    (delta_v: circularize_orbit_at(orbit, UT), UT: UT)
}

/// Calculate the required delta-v to change the given `orbit`
/// to a (mostly) circular orbit at a given universal time `UT`.
pub sync fn circularize_orbit_at(orbit : Orbit, UT : float) -> Vec3 = {
    const desired_velocity = circular_orbit_speed(orbit.reference_body, orbit.radius(UT)) * orbit.horizontal(UT)
    const actual_velocity = orbit.orbital_velocity(UT)

    desired_velocity - actual_velocity
}

sync fn circular_orbit_speed(body : Body, radius : float) -> float = math::sqrt(body.grav_parameter / radius)

/// Calculate the required delta-v to change the `apoapsis` and `periapsis` of the given `orbit` 
/// at time `UT`.
pub sync fn ellipticize(orbit : Orbit, UT : float, periapsis : float, apoapsis : float) -> Vec3 = {
    const radius = orbit.radius(UT)

    const apoapsis_radius = math::max(0, apoapsis) + orbit.reference_body.radius
    const periapsis_radius = math::max(0, periapsis) + orbit.reference_body.radius
    const mu = orbit.reference_body.grav_parameter

    const E = -mu / (periapsis_radius + apoapsis_radius) //total energy per unit mass of new orbit
    const L = math::sqrt(((math::pow(E * (apoapsis_radius - periapsis_radius), 2) - mu * mu) / (2 * E)).abs) //angular momentum per unit mass of new orbit
    const kineticE = E + mu / radius //kinetic energy (per unit mass) of new orbit at UT
    const horizontalV = L / radius   //horizontal velocity of new orbit at UT
    let verticalV = math::sqrt((2 * kineticE - horizontalV * horizontalV).abs) //vertical velocity of new orbit at UT

    const actual_velocity = orbit.orbital_velocity(UT)

    verticalV *= (orbit.up(UT) * actual_velocity).sign

    const desired_velocity = horizontalV * orbit.horizontal(UT) + verticalV * orbit.up(UT)

    desired_velocity - actual_velocity
}

/// Calculate the required delta-v to change the periapsis of an `orbit` 
/// to `periapsis_radius` at time `UT`
pub sync fn change_periapsis(orbit : Orbit, UT : float, periapsis_radius : float) -> Result<Vec3, string> = {
    const radius = orbit.radius(UT)
    const new_periapsis_radius = math::clamp(periapsis_radius, 1, radius - 1)
    const raising = new_periapsis_radius > orbit.periapsis_radius
    const burn_direction = if(raising) orbit.horizontal(UT) else -orbit.horizontal(UT)
    
    const delta_v = regula_falsi_solve(fn(delta_v) -> {
        const expected_radius = orbit.perturbed_orbit(UT, delta_v * burn_direction).periapsis_radius 

        if(expected_radius.is_finite) expected_radius - new_periapsis_radius else -new_periapsis_radius
    }, 0, 10, 0.1, 1000)

    if(delta_v.is_finite) Ok(delta_v * burn_direction) else Err("change_periapsis: Unable to change periapsis to " + periapsis_radius.to_string())
}

/// Calculate the required delta-v to change the apoapsis of an `orbit` 
/// to `apoapsis_radius` at time `UT`
pub sync fn change_apoapsis(orbit : Orbit, UT : float, apoapsis_radius : float) -> Result<Vec3, string> = {
    const radius = orbit.radius(UT)
    const new_apoapsis_radius = if(new_apoapsis_radius > 0) math::max(apoapsis_radius, radius + 1) else apoapsis_radius
    const raising = new_apoapsis_radius > orbit.apoapsis_radius.ok_or("Can not change apoapsis of hyperbolic orbit")?
    const burn_direction = if(raising) orbit.horizontal(UT) else -orbit.horizontal(UT)

    const delta_v = regula_falsi_solve(fn(delta_v) -> {
        const expected_radius = orbit.perturbed_orbit(UT, delta_v * burn_direction).apoapsis_radius
        
        if(expected_radius.defined && expected_radius.value.is_finite) expected_radius.value - new_apoapsis_radius else -new_apoapsis_radius
    }, 0, 10, 0.1, 1000)

    if(delta_v.is_finite) Ok(delta_v * burn_direction) else Err("change_apoapsis: Unable to change apoapsis to " + apoapsis_radius.to_string())
}

/// Calculate delta-v to intercept a `target` orbit starting nearly at time `UT` with
/// a nearly transfer time of `TT`. `UT` and `TT` will be optimized for a minimal delta-v for
/// acceleration and deacceleration.
pub sync fn bi_impulsive_transfer_near(start : Orbit, target : Orbit, UT : float, TT : float) -> Result<(delta_v: Vec3, UT: float, TT: float), string> = {
    const (x, y) = amoeba_optimize_perturbation(fn(start_eta : float, tof : float) -> {
        const UT1 = UT + start_eta
        const UT2 = UT1 + tof
        const (start_velocity, target_velocity) = intercept_at(start, UT1, target, UT2)
        start_velocity.magnitude + target_velocity.magnitude
    }, vec2(0, TT), vec2(1, 1), 0.000001, 1000)?
    const burn_UT = UT + x
    const (start_velocity, _) = intercept_at(start, burn_UT, target, burn_UT + y)

    (delta_v: start_velocity, UT: burn_UT, TT: y)
}

/// Calculate delta-v to intercept a `target` orbit starting after `min_UT`.
/// Actual starting and transfer time will be optimized for a minimal delta-v for
/// acceleration and deacceleration.
///
/// Will result in an error if maneuver nodes cannot be created 
/// (e.g. because command or tracking facility has not been sufficiently upgraded)
pub sync fn bi_impulsive_transfer(start : Orbit, target : Orbit, min_UT : float, max_UT : float = -math::MAX_FLOAT) -> Result<(delta_v: Vec3, UT: float, TT: float), string> = {
    const a = (start.semi_major_axis.abs + target.semi_major_axis.abs) / 2
    const max_start = if(max_UT > min_UT) max_UT - min_UT else 1.5 * start.synodic_period(target)
    const max_tof = math::PI * math::sqrt(a * a * a / start.reference_body.grav_parameter)
    const (best, _) = anneal_optimize(fn(start_eta : float, tof : float) -> {
        const UT1 = min_UT + start_eta
        const UT2 = UT1 + tof
        const (start_velocity, target_velocity) = intercept_at(start, UT1, target, UT2)
        start_velocity.magnitude + target_velocity.magnitude
    }, vec2(0, 1), vec2(max_start, max_tof), 10000)

    bi_impulsive_transfer_near(start, target, min_UT + best.x, best.y)
}

pub sync fn bi_impulsive_transfer_body(start : Orbit, target : Body, min_UT : float, target_periapsis : float) -> Result<(delta_v: Vec3, UT: float, TT: float), string> = {
    const (delta_v, UT, TT) = bi_impulsive_transfer(start, target.orbit, min_UT)?
    const target_PeR = if(target_periapsis > 0) target_periapsis + target.radius else target_periapsis - target.radius

    const calc_periapsis_diff = fn(factor : float) -> {
        const test_orbit = start.perturbed_orbit(UT, delta_v * factor)
        const SOI_change_UT = regula_falsi_solve(fn(t) -> {
            const diff = target.orbit.relative_position(t) - test_orbit.relative_position(t)

            target.SOI_radius - diff.magnitude
        }, UT, UT + TT, 10, 100)
        const body_position = target.orbit.relative_position(SOI_change_UT)
        const body_velocity = target.orbit.orbital_velocity(SOI_change_UT)
        const body_radius = target.radius
        const body_mu = target.grav_parameter

        const rel_position = test_orbit.relative_position(SOI_change_UT) - body_position
        const rel_velocity = test_orbit.orbital_velocity(SOI_change_UT) - body_velocity
        const L = rel_velocity.cross(rel_position)
        const E = 0.5 * rel_velocity.sqr_magnitude - body_mu / target.SOI_radius
        const PeR = (target.up * L).sign * 0.5 * (math::sqrt(body_mu * body_mu + 2 * E * L.sqr_magnitude) - body_mu) / E

        PeR - target_PeR
    }
    
    const factor = regula_falsi_solve(calc_periapsis_diff, 0.99, 1.0, 10, 100)

    (delta_v: delta_v * factor, UT: UT, TT: TT)
}

pub sync fn course_correction_body(start : Orbit, target : Body, UT : float, target_periapsis : float) -> Vec3 = {
    const closest_approach_time = next_closest_approach_time(start, target.orbit, UT + 2)
    const delta_v = intercept_at(start, UT, target.orbit, closest_approach_time).start_velocity
    const target_PeR = if(target_periapsis > 0) target_periapsis + target.radius else target_periapsis - target.radius

    const calc_periapsis_diff = fn(factor : float) -> {
        const test_orbit = start.perturbed_orbit(UT, delta_v * factor)
        const SOI_change_UT = regula_falsi_solve(fn(t) -> {
            const diff = target.orbit.relative_position(t) - test_orbit.relative_position(t)

            target.SOI_radius - diff.magnitude
        }, UT, closest_approach_time, 10, 100)
        const body_position = target.orbit.relative_position(SOI_change_UT)
        const body_velocity = target.orbit.orbital_velocity(SOI_change_UT)
        const body_radius = target.radius
        const body_mu = target.grav_parameter

        const rel_position = test_orbit.relative_position(SOI_change_UT) - body_position
        const rel_velocity = test_orbit.orbital_velocity(SOI_change_UT) - body_velocity
        const L = rel_velocity.cross(rel_position)
        const E = 0.5 * rel_velocity.sqr_magnitude - body_mu / target.SOI_radius
        const PeR = (target.up * L).sign * 0.5 * (math::sqrt(body_mu * body_mu + 2 * E * L.sqr_magnitude) - body_mu) / E

        PeR - target_PeR
    }
    
    const factor = regula_falsi_solve(calc_periapsis_diff, 0.99, 1.0, 10, 100)
    
    delta_v * factor
}

/// Calculate required delta-v to intercept `target` orbit at time `target_UT` from `start` orbit at time `start_UT`.
/// `offset_distance` may be used to define a desired distance to the target.
pub sync fn intercept_at(start : Orbit, start_UT : float, target : Orbit, target_UT : float, offset_distance : float = 0) -> (start_velocity : Vec3, target_velocity : Vec3) = {
    const start_rel_pos = start.relative_position(start_UT)
    let target_rel_pos = target.relative_position(target_UT)

    const start_orbit_velocity = start.orbital_velocity(start_UT)
    const target_orbit_velocity = target.orbital_velocity(target_UT)

    if(offset_distance != 0.0) target_rel_pos += offset_distance * target_rel_pos.cross(target.orbit_normal).normalized
    const (transfer_vi_clockwise @ v1, transfer_vf_clockwise @ v2) = solve_lambert(start_rel_pos, target_rel_pos, target_UT - start_UT, start.reference_body.grav_parameter, false)
    const (transfer_vi_counter_clockwise @ v1, transfer_vf_counter_clockwise @ v2) = solve_lambert(start_rel_pos, target_rel_pos, target_UT - start_UT, start.reference_body.grav_parameter, true)
    const total_clockwise = (target_orbit_velocity - transfer_vf_clockwise).magnitude + (transfer_vi_clockwise - start_orbit_velocity).magnitude
    const total_counter_clockwise = (target_orbit_velocity - transfer_vf_counter_clockwise).magnitude + (transfer_vi_counter_clockwise - start_orbit_velocity).magnitude

    if(total_clockwise < total_counter_clockwise)
        (target_velocity: target_orbit_velocity - transfer_vf_clockwise, start_velocity: transfer_vi_clockwise - start_orbit_velocity)
    else
        (target_velocity: target_orbit_velocity - transfer_vf_counter_clockwise, start_velocity: transfer_vi_counter_clockwise - start_orbit_velocity)
}

pub sync fn next_closest_approach_time(start : Orbit, target : Orbit, UT : float) -> float = {
    let closest_approach_time = UT
    let closest_approach_distance = math::MAX_FLOAT
    let min_time = UT
    let interval = start.period
    
    if (start.eccentricity > 1) {
       interval = 100 / start.mean_motion //this should be an interval of time that covers a large chunk of the hyperbolic arc
    }
    let max_time = UT + interval
    const num_divisions = 20

    for (iter in 0..8) {
      const dt = (max_time - min_time) / num_divisions
       
      for (i in 0..num_divisions) {
        const t = min_time + i * dt
        const distance = (start.global_position(t) - target.global_position(t)).magnitude
        
        if (distance < closest_approach_distance) {
          closest_approach_distance = distance
          closest_approach_time = t
        }
      }

      min_time = math::clamp(closest_approach_time - dt, UT, UT + interval)
      max_time = math::clamp(closest_approach_time + dt, UT, UT + interval)
    }
    
    closest_approach_time
}