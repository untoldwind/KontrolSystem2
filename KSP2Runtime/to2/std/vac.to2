use { Vessel, DELTAV_VACCUM, MODE_MANEUVER, MODE_STABILITY_ASSIST } from ksp::vessel
use { look_dir_up } from ksp::math
use core::math as math
use { CONSOLE } from ksp::console
use { current_time, sleep, wait_until } from ksp::game
use { global_ship_is_facing } from std::utils
use { warp_to } from ksp::game::warp
use { trigger_staging } from std::staging

/// Execute the next planed maneuver node.
///
/// Will result in an error if there are no planed maneuver nodes.
pub fn exec_next_node(vessel : Vessel) -> Result<Unit, string> = {
    CONSOLE.print_line("=== exec_next_node ===")
    const console_row = CONSOLE.cursor_row
    CONSOLE.move_cursor(console_row + 4, 0)
    
    const node = vessel.maneuver.next_node()?
    
    vessel.autopilot.enabled = true
    vessel.autopilot.mode = MODE_MANEUVER
    
    const frame = vessel.main_body.celestial_frame
    const target_orbit = node.expected_orbit
    const dv0 = node.global_burn_vector.vector
    const burn_duration = node.burn_duration 
    
    while(!global_ship_is_facing(vessel, dv0, 5, 0.5)) {
        CONSOLE.print_at(console_row, 0, "Waiting for ship to align " + vessel.global_facing.vector.normalized.to_fixed(frame, 3) + " " + dv0.normalized.to_fixed(frame, 3))
        sleep(0.2)
    }
    
    CONSOLE.print_at(console_row + 1, 0, "Warping to maneuver node")
    
    warp_to(node.time - 10)
    vessel.autopilot.mode = MODE_MANEUVER  // SAS mode resets after warp
    
    wait_until(fn() -> node.ETA <= 0.5)

    CONSOLE.print_at(console_row + 2, 0, "BURN")

    const end_ut = node.time + node.burn_duration
    const dv_min : Cell<float> = Cell(dv0.magnitude)
    const throttle_limit : Cell<(min: float, max: float)> = Cell((min: 0.0, max: 0.0))
    const throttle_manager = vessel.manage_throttle(fn(deltaT) -> {
        const (min, max) = throttle_limit.value
        const dv = math::min(dv_min.value, node.burn_vector.magnitude)
        const throttle = math::clamp(dv * vessel.mass / math::max(1.0, vessel.available_thrust), min, max)
        CONSOLE.print_at(console_row + 1, 0, "Throttle: " + throttle.to_string())
        throttle
    })

    while(dv_min.value >= 0.05) {
        const ut = current_time()
        
        if (ut > end_ut + 5) break
        
        const dv = target_orbit.global_velocity(ut).to_relative(frame) - vessel.orbit.global_velocity(ut).to_relative(frame)

        if(dv0 * dv < 0) break

        dv_min.update(fn(m) -> math::min(m, dv.magnitude))
        CONSOLE.print_at(console_row    , 0, "DV remaining: " + dv_min.value.to_string())
        
        sleep(0.1)

        if(trigger_staging(vessel)) {
            CONSOLE.print_line("Next stage triggered")
        }
        
        if(global_ship_is_facing(vessel, dv0, 20, 2)) {
           CONSOLE.print_at(console_row + 2, 0, "Ship aligned, unlock thrust")
           throttle_limit.set_value((min: 0.05, max: 1.0))
        } else {
            CONSOLE.print_at(console_row + 2, 0, "Ship unaligned, limited throttle")
            throttle_limit.set_value((min: 0.1, max: 0.1))
        }
    }

    CONSOLE.print_line("DONE")
    
    throttle_manager.release()
    
    node.remove()

    vessel.autopilot.mode = MODE_STABILITY_ASSIST
}

/// Estimate the required burn time for a desired `delta_v` in vacuum.
///
/// * `stage_delay` is the assumed amount of seconds required for staging
/// * `throttle_limit` is a limit for the throttle to be considered
pub sync fn estimate_burn_time(vessel : Vessel, delta_v : float, stage_delay : float, throttle_limit : float) -> (burn_time: float, half_burn_time: float) = {
    let stage = vessel.staging.count
    let dv_left = delta_v
    let half_dv_left = delta_v / 2
    let burn_time = 0.0
    let half_burn_time = 0.0
    let last_stage_burn_time = 0.0

    while(stage >= 0) {
        stage -= 1

        const maybe_stage_info = vessel.delta_v.stage(stage)

        if(!maybe_stage_info.defined) continue

        const stage_info = maybe_stage_info.value
        const stage_deltav = stage_info.get_deltav(DELTAV_VACCUM)
        const stage_thrust = stage_info.get_thrust(DELTAV_VACCUM)

        if(stage_deltav <= 0.0 || stage_thrust <= 0.0) {
            // This stage has to be skipped, i.e. it will be necessary to stage twice
            if (burn_time - last_stage_burn_time < stage_delay && stage != vessel.staging.count)
                burn_time += stage_delay - (burn_time - last_stage_burn_time)
            burn_time += stage_delay
            last_stage_burn_time = burn_time
            continue
        }
        const stage_burn_dv = math::min(stage_deltav, dv_left)
        dv_left -= stage_burn_dv
        const stage_burn_fraction = stage_burn_dv / stage_deltav

        // Delta-V is proportional to ln(m0 / m1) (where m0 is initial
        // mass and m1 is final mass). We need to know the final mass
        // after this stage burns (m1b):
        //      ln(m0 / m1) * stageBurnFraction = ln(m0 / m1b)
        //      exp(ln(m0 / m1) * stageBurnFraction) = m0 / m1b
        //      m1b = m0 / (exp(ln(m0 / m1) * stageBurnFraction))
        const stage_burn_final_mass = stage_info.start_mass / math::exp(math::log(stage_info.start_mass / stage_info.end_mass) * stage_burn_fraction)
        const stage_avg_accel = stage_thrust / ((stage_info.start_mass + stage_burn_final_mass) / 2) * throttle_limit

        half_burn_time += math::min(half_dv_left, stage_burn_dv) / stage_avg_accel
        half_dv_left = math::max(0, half_dv_left - stage_burn_dv)

        burn_time += stage_burn_dv / stage_avg_accel
    }

    (burn_time: burn_time, half_burn_time: half_burn_time)
}