use * from core::testing
use { join, format } from core::str

test sync fn test_string_repeat() -> Unit = {
    assert_string("", "abc".repeat(0))
    assert_string("abc", "abc".repeat(1))
    assert_string("abcabc", "abc".repeat(2))
    assert_string("abcabcabc", "abc".repeat(3))
}

test sync fn test_string_pad() -> Unit = {
    assert_string("abcdefghij", "abcdefghij".pad_left(5))
    assert_string("          abcdefghij", "abcdefghij".pad_left(20))

    assert_string("abcdefghij", "abcdefghij".pad_right(5))
    assert_string("abcdefghij          ", "abcdefghij".pad_right(20))
}

test sync fn test_string_assign() -> Unit = {
    let a = "123"

    assert_string("123", a)

    a += "abc"

    assert_string("123abc", a)
}

test sync fn test_string_length() -> Unit = {
    assert_int(0, "".length)
    assert_int(2, "12".length)
    assert_int(10, "1234567890".length)
    assert_int(26, "abcdefghijklmnopqrstuvwxyz".length)
}

test sync fn test_string_contains() -> Unit = {
    assert_true("Hello, World".contains("o, Wor"))
    assert_false("Hello, World".contains("a, Wor"))
    assert_true("Hello, World".starts_with("Hello"))
    assert_false("Hello, World".starts_with("ello"))
    assert_true("Hello, World".ends_with("World"))
    assert_false("Hello, World".ends_with("Warld"))
}

test sync fn test_string_compare() -> Unit = {
    assert_true("abcd" == "abcd")
    assert_false("abcd" == "abce")
    assert_true("abcd" < "abce")
    assert_true("abcd" > "abcc")
}

test sync fn test_string_convert() -> Unit = {
    assert_string("abdc", "aBdC".to_lower())
    assert_string("ABDC", "aBdC".to_upper())
}

test sync fn test_string_join() -> Unit = {
    assert_string("Hello|World|Joined", join("|", ["Hello", "World", "Joined"]))
    assert_string("Hello | World | Joined", join(" | ", ["Hello", "World", "Joined"]))
    assert_string("Hello, World, Joined", join(", ", ["Hello", "World", "Joined"]))
}

test sync fn test_string_format() -> Unit = {
    assert_string("First:       1, Second:     12.25", format("First: {0,7}, Second: {1,9}", [1.0, 12.25]))
    assert_string("First: 1.123, Second: 12.35", format("First: {0:F3}, Second: {1:F2}", [1.1234567, 12.345678]))
    assert_string("First:       1, Second:     12.25, Third: Hallo", format("First: {0,7}, Second: {1,9}, Third: {2}", (1.0, 12.25, "Hallo")))
    assert_string("First: 1.123, Second: 12.35, Third: Hallo", format("First: {0:F3}, Second: {1:F2}, Third: {2}", (1.1234567, 12.345678, "Hallo")))
    assert_string("First:   1.123, Second:   12.35, Third: Hallo", format("First: {0,7:F3}, Second: {1,7:F2}, Third: {2}", (1.1234567, 12.345678, "Hallo")))
}

test sync fn test_string_index_of() -> Unit = {
    assert_int(-1, "abcdefgh".index_of("xzy"))
    assert_int(0, "abcdefgh".index_of("abc"))
    assert_int(6, "abcdefgh".index_of("g"))
    assert_int(6, "abcdefghabcdefgh".index_of("g"))
    assert_int(14, "abcdefghabcdefgh".index_of("g", 7))
}

test sync fn test_string_slice() -> Unit = {
    assert_string("", "abcdefgh".slice(20))
    assert_string("defgh", "abcdefgh".slice(3))
    assert_string("defgh", "abcdefgh".slice(3, 20))
    assert_string("de", "abcdefgh".slice(3, 5))
    assert_string("", "abcdefgh".slice(3, 2))
}

test sync fn test_string_replace() -> Unit = {
    assert_string("abcdefgh", "abcdefgh".replace("x", "z"))
    assert_string("abcenfgh", "abcdefgh".replace("de", "en"))
    assert_string("abcenfghabcenfgh", "abcdefghabcdefgh".replace("de", "en"))
}

test sync fn test_string_split() -> Unit = {
    assert_string("[abcdefgh]", "abcdefgh".split(",").to_string())
    assert_string("[a, b, c, de, fgh]", "a,b,c,de,fgh".split(",").to_string())
}

test sync fn test_string_ellipsis() -> Unit = {
    assert_string("1234567", "1234567".ellipsis(10))
    assert_string("1234567890", "1234567890".ellipsis(10))
    assert_string("1234567...", "12345678901".ellipsis(10))
    assert_string("1234567...", "123456789012346".ellipsis(10))

}

test sync fn test_parse_int() -> Unit = {
    assert_int(1234, "1234".to_int().value)
    assert_int(12345, "   12345   ".to_int().value)
    assert_int(-234, "-234".to_int().value)
    
    const result = "Not a number".to_int()
    assert_false(result.success)
    assert_string("'Not a number' is not a valid integer", result.error.message)
}

test sync fn test_parse_float() -> Unit = {
    assert_float(12.345, "12.345".to_float().value)
    assert_float(12.345, "   12.345   ".to_float().value)

    assert_float(12.345, "1234.5E-2".to_float().value)
    assert_float(12.345, ".12345E2".to_float().value)

    const result = "Not a number".to_float()
    assert_false(result.success)
    assert_string("'Not a number' is not a valid floating point", result.error.message)
}